"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2365],{6354:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var r=a(2647),n=a(4848),o=a(8453);const i={title:"ASP.NET Core default project structure explained (part 2)",tags:["ASP-NET-CORE","PROJECT-TEMPLATE"],slug:"asp-net-core-project-structure-explained-part2"},s="ASP.NET Core default project structure explained (part 2)",c={authorsImageUrls:[]},p=[{value:"Startup class",id:"startup-class",level:2}];function l(e){const t={a:"a",blockquote:"blockquote",h2:"h2",img:"img",p:"p",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:a(7084).A+"",width:"1920",height:"1442"})}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["This is the second part of the ",(0,n.jsx)(t.a,{href:"asp-net-core-default-project-structure-explained-part-1",children:"article"}),", where we take apart the default ASP.NET Core solution template piece by piece and try to explain the purpose of each part and how exactly it works. You can consider it as a reference where you can check why a particular part was added to your project and find a link to the relevant documentation that explains it in detail."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"startup-class",children:"Startup class"}),"\n",(0,n.jsx)(t.p,{children:"As we already mentioned in the first article, the Startup class is the entry point for all initialization codes in your application.\nLong story short, the Startup defines what your application will do and how exactly it will work."})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},7084:(e,t,a)=>{a.d(t,{A:()=>r});const r=a.p+"assets/images/computer-coffee-02-3db0865179d3b5ebf4e4295b5b74d3ca.jpg"},8453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>s});var r=a(6540);const n={},o=r.createContext(n);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(o.Provider,{value:t},e.children)}},2647:e=>{e.exports=JSON.parse('{"permalink":"/blog/asp-net-core-project-structure-explained-part2","source":"@site/blog/2020-08-10-asp-net-core-project-structure-explained-part2/index.md","title":"ASP.NET Core default project structure explained (part 2)","description":"This is the second part of the article, where we take apart the default ASP.NET Core solution template piece by piece and try to explain the purpose of each part and how exactly it works. You can consider it as a reference where you can check why a particular part was added to your project and find a link to the relevant documentation that explains it in detail.","date":"2020-08-10T00:00:00.000Z","tags":[{"inline":true,"label":"ASP-NET-CORE","permalink":"/blog/tags/asp-net-core"},{"inline":true,"label":"PROJECT-TEMPLATE","permalink":"/blog/tags/project-template"}],"readingTime":10.075,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"ASP.NET Core default project structure explained (part 2)","tags":["ASP-NET-CORE","PROJECT-TEMPLATE"],"slug":"asp-net-core-project-structure-explained-part2"},"unlisted":false,"prevItem":{"title":"CRUD operations in ASP.NET Core with EasyData library","permalink":"/blog/crud-asp-net-core-with-easydata"},"nextItem":{"title":"ASP.NET Core default project structure explained (part 1)","permalink":"/blog/asp-net-core-project-structure-explained-part-1"}}')}}]);