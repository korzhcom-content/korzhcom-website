"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[142],{9841:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var s=n(5893),i=n(1151);const o={title:"Single-file web API services with .NET 5 and ASP.NET Core",tags:["ASP-NET-CORE","WEB-SERVICE","TOP-LEVEL-STATEMENTS"],slug:"single-file-web-service-aspnetcore"},a="Single-file web API services with .NET 5 and ASP.NET Core",r={permalink:"/blog/single-file-web-service-aspnetcore",source:"@site/blog/2021-04-15-single-file-web-service-aspnetcore/index.md",title:"Single-file web API services with .NET 5 and ASP.NET Core",description:"Introduction",date:"2021-04-15T00:00:00.000Z",formattedDate:"April 15, 2021",tags:[{label:"ASP-NET-CORE",permalink:"/blog/tags/asp-net-core"},{label:"WEB-SERVICE",permalink:"/blog/tags/web-service"},{label:"TOP-LEVEL-STATEMENTS",permalink:"/blog/tags/top-level-statements"}],readingTime:3.27,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Single-file web API services with .NET 5 and ASP.NET Core",tags:["ASP-NET-CORE","WEB-SERVICE","TOP-LEVEL-STATEMENTS"],slug:"single-file-web-service-aspnetcore"},unlisted:!1,prevItem:{title:"Using TypeScript with WebPack in ASP.NET Core projects",permalink:"/blog/typescript-webpack-aspnetcore"},nextItem:{title:"CRUD operations in ASP.NET Core with EasyData library",permalink:"/blog/crud-asp-net-core-with-easydata"}},l={authorsImageUrls:[]},c=[{value:"Introduction",id:"introduction",level:2},{value:"Single code file ASP.NET Core web service",id:"single-code-file-aspnet-core-web-service",level:2},{value:"Top-level statements",id:"top-level-statements",level:3},{value:"Creating a host",id:"creating-a-host",level:3},{value:"Setting up the web application",id:"setting-up-the-web-application",level:3},{value:"Running the app",id:"running-the-app",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(9169).Z+"",width:"1800",height:"951"})}),"\n",(0,s.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(t.p,{children:"There are many ways to create a web application today. We have a lot of different platforms, frameworks, and libraries: PHP, Python, Java, NodeJS, and a dozen of others."}),"\n",(0,s.jsx)(t.p,{children:"While ASP.NET (Core) was always a good choice for developing enterprise-level web applications (with many complex web pages, some Web API endpoints, static resources, etc.),\nit's never been the best choice for creating a small web service with just a few endpoints to handle REST API requests in JSON or plain text formats."}),"\n",(0,s.jsx)(t.p,{children:"Well, that was true until .NET 5 was released last year. With support for top-level statements and new features in C# language, .NET 5 allows us to create a solid web service in just a few minutes and with a single code file."}),"\n",(0,s.jsx)(t.h2,{id:"single-code-file-aspnet-core-web-service",children:"Single code file ASP.NET Core web service"}),"\n",(0,s.jsx)(t.p,{children:'Below you will find an example of a very basic "echo" web service with only one endpoint that just takes the content of a POST request and returns it back in JSON format. Not quite a real-world task of course, but enough for demonstration purposes.'}),"\n",(0,s.jsx)(t.p,{children:"So, to create our single-code-file web service just open your terminal, create an empty folder and type the following command:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"dotnet new web\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This command will create a simple ASP.NET Core project with two code files: ",(0,s.jsx)(t.code,{children:"Program.cs"})," and ",(0,s.jsx)(t.code,{children:"Startup.cs"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Since our purpose is to get only one file, we remove ",(0,s.jsx)(t.code,{children:"Startup.cs"}),". Yeah, it's that simple."]}),"\n",(0,s.jsxs)(t.p,{children:["After that just copy/paste the following piece of code into ",(0,s.jsx)(t.code,{children:"Program.cs"})," file:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'using System.IO;\nusing System.Net.Mime;\n\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Hosting;\n\n\nHost.CreateDefaultBuilder(args)\n    .ConfigureWebHostDefaults(webBuilder => webBuilder\n        .Configure(app => app.Run(async context => {\n            if (context.Request.Path == "/api/echo" && context.Request.Method == "POST") {\n                //getting the content of our POST request\n                using var reader = new StreamReader(context.Request.Body);\n                var content = await reader.ReadToEndAsync();\n\n                //sending it back in the response\n                context.Response.ContentType = MediaTypeNames.Text.Plain;\n                await context.Response.WriteAsync(content);\n            }\n            else {\n                //Return 404 for any other endpoint\n                context.Response.StatusCode = StatusCodes.Status404NotFound;\n                await context.Response.WriteAsync($"WRONG ENDPOINT: {context.Request.Path.ToString()}. Use POST request to /api/echo instead");\n            }\n        })))\n    .Build().Run();\n'})}),"\n",(0,s.jsx)(t.p,{children:"Let's take a closer look what happens here."}),"\n",(0,s.jsx)(t.h3,{id:"top-level-statements",children:"Top-level statements"}),"\n",(0,s.jsxs)(t.p,{children:["Fist we have a block of ",(0,s.jsx)(t.code,{children:"using"})," statement. That's usual for any C# file. Nothing special."]}),"\n",(0,s.jsxs)(t.p,{children:["After that, we start straight with an instruction. We call ",(0,s.jsx)(t.code,{children:"CreateDefaultBuilder()"})," method of ",(0,s.jsx)(t.code,{children:"Host"})," class.\nIf you've had experience with C# before, you may be a little bit confused by this approach. No namespaces, no class definitions.\nYou may even say that this piece of code has the wrong syntax and will not be compiled."]}),"\n",(0,s.jsxs)(t.p,{children:["But it will. It's possible to do now with C# 9 and it's called ",(0,s.jsx)(t.a,{href:"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/top-level-statements",children:"top-level statements"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"creating-a-host",children:"Creating a host"}),"\n",(0,s.jsxs)(t.p,{children:["As we already mentioned above the only instruction we actually have in our little program is ",(0,s.jsx)(t.code,{children:"Host.CreateDefaultBuilder()"})," call.\nIt creates a ",(0,s.jsx)(t.a,{href:"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host",children:"generic host builder"})," with default settings for logging, configuration, and Dependency Injection container."]}),"\n",(0,s.jsx)(t.h3,{id:"setting-up-the-web-application",children:"Setting up the web application"}),"\n",(0,s.jsxs)(t.p,{children:["After that, the ",(0,s.jsx)(t.code,{children:"ConfigureWebHostDefaults"})," method loads the configuration, set Kestrel as the webserver, enables IIS integrations, and adds some default middlewares."]}),"\n",(0,s.jsxs)(t.p,{children:["Finally, we call ",(0,s.jsx)(t.code,{children:"Configure"})," method to set up the ",(0,s.jsx)(t.a,{href:"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/",children:"middleware pipeline"}),", or, to define the only middleware that will actually process all requests to our web service (with that ",(0,s.jsx)(t.code,{children:"app.Run(...)"})," call)."]}),"\n",(0,s.jsxs)(t.p,{children:["The next piece of code is self-explanatory. If it's a POST request to ",(0,s.jsx)(t.code,{children:"/api/echo"})," we read the content of the request's body and just write it back to the response stream. Otherwise, we return the 404 code with some error message."]}),"\n",(0,s.jsx)(t.p,{children:"As I mentioned above, this is a very basic example of a microweb service, but I intentionally made it simple to show how everything works in general without going into detail."}),"\n",(0,s.jsx)(t.h2,{id:"running-the-app",children:"Running the app"}),"\n",(0,s.jsx)(t.p,{children:"To run this simple web service just type in the terminal (while you are in the project's directory):"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"dotnet run\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Here is what you get in response by sending a POST request to /api/echo using ",(0,s.jsx)(t.a,{href:"https://www.postman.com/",children:"Postman utility"}),":"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"POST request to /api/echo via Postman",src:n(6271).Z+"",width:"734",height:"506"})})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},6271:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/postman-echo01-ebead691e5e39041afe804af4aca8eed.png"},9169:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/simple-webservice-abc11c8c7d9c3cbcb922a91416c88af6.jpg"},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>a});var s=n(7294);const i={},o=s.createContext(i);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);