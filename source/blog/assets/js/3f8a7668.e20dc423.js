"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2286],{8143:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var n=s(5893),r=s(1151);const i={title:"Using embedded resources in testing projects",tags:["UNIT-TESTING","INTEGRATION-TESTS","RESOURCES"],slug:"embedded-resources-testing-projects"},o="Using embedded resources in testing projects",a={permalink:"/blog/embedded-resources-testing-projects",source:"@site/blog/2018-05-30-embedded-resources-testing-projects/index.md",title:"Using embedded resources in testing projects",description:"Quite often when you are writing tests it's necessary to store some data together with the testing project to make them available in the test functions.",date:"2018-05-30T00:00:00.000Z",formattedDate:"May 30, 2018",tags:[{label:"UNIT-TESTING",permalink:"/blog/tags/unit-testing"},{label:"INTEGRATION-TESTS",permalink:"/blog/tags/integration-tests"},{label:"RESOURCES",permalink:"/blog/tags/resources"}],readingTime:1.55,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Using embedded resources in testing projects",tags:["UNIT-TESTING","INTEGRATION-TESTS","RESOURCES"],slug:"embedded-resources-testing-projects"},unlisted:!1,prevItem:{title:"Add extra user claims in ASP.NET Core webapp",permalink:"/blog/add-extra-user-claims-aspnet-core-webapp"},nextItem:{title:"ASP.NET Identity - Adding master password",permalink:"/blog/aspnet-identity-master-password"}},c={authorsImageUrls:[]},l=[];function u(e){const t={a:"a",code:"code",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:s(946).Z+"",width:"1280",height:"720"})}),"\n",(0,n.jsx)(t.p,{children:"Quite often when you are writing tests it's necessary to store some data together with the testing project to make them available in the test functions."}),"\n",(0,n.jsx)(t.p,{children:"The solution is quite simple:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["You put necessary files to some folder of your testing project (e.g. ",(0,n.jsx)(t.code,{children:"Resources"}),")"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:'Mark them as "Embedded Resource"'}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"After that, you can access any of these resources in any place of your testing module."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Here is an example of a resource file included in your testing project:\n",(0,n.jsx)(t.img,{src:"https://korzh.com/static/blogs/net-tricks/vs-project-embres.png",alt:"an embedded resource file"})]}),"\n",(0,n.jsx)(t.p,{children:"Here is a static class with extension functions which may help you on step #3:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'public static class ResourceUtils\n{\n\tpublic static Stream GetResourceStream(this Assembly assembly, string resourceFolder, string resourceFileName) \n\t{\n\t\t \n\t\tstring[] nameParts = assembly.FullName.Split(\',\');\n\t\t\t\n\t\tstring resourceName = nameParts[0] + "." +  resourceFolder + "." + resourceFileName;\n\n\t\tvar resources = new List<string>(assembly.GetManifestResourceNames());\n\t\tif (resources.Contains(resourceName))\n\t\t\treturn assembly.GetManifestResourceStream(resourceName);\n\t\telse\n\t\t\treturn null;\n\t}\n\n\tpublic static string GetResourceAsString(this Assembly assembly, string folder, string fileName) \n\t{\n\t\tstring fileContent;\n\t\tusing (StreamReader sr = new StreamReader(GetResourceStream(assembly, folder, fileName))) {\n\t\t\tfileContent = sr.ReadToEnd();\n\t\t}\n\t\treturn fileContent;\n\t}\n\t\n\tpublic static Stream GetResourceStream(this Type type, string resourceFolder, string resourceFileName) \n\t{\n\t\tvar assembly = type.GetTypeInfo().Assembly;\n\t\treturn assembly.GetResourceStream(resourceFolder, resourceFileName);\n\t}\n\t\n\tpublic static string GetResourceAsString(this Type type, string folder, string fileName) \n\t{\n\t\tvar assembly = type.GetTypeInfo().Assembly;\n\t\treturn assembly.GetResourceAsString(folder, fileName);\n\t}\t\n}\n\npublic class ResourceUtilsException : Exception {\n\tpublic ResourceUtilsException(string message) : base(message) { }\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["To make it even simpler - we put these and some other functions to a ",(0,n.jsx)(t.a,{href:"https://www.nuget.org/packages/Korzh.Utils/",children:"Nuget package"})," you can reference in your project."]}),"\n",(0,n.jsx)(t.p,{children:"Finally, here is how your testing function will access the resource file defined on the first step:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'[TestMethod]\npublic void TestMethod1() {\n\tstring xml = typeof(UnitTest1).GetResourceAsString("Resources", "XMLFile1.xml");\n\t.    .    .    .    .    .\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["(here, for the ",(0,n.jsx)(t.code,{children:"typeof"})," function parameter you use any class from the same assembly where your resources are placed)"]}),"\n",(0,n.jsx)(t.p,{children:"Enjoy!"})]})}function d(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},946:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/cubes-677092_1280-cfd88cd19b62c7324e7ea2ace80b11f3.png"},1151:(e,t,s)=>{s.d(t,{Z:()=>a,a:()=>o});var n=s(7294);const r={},i=n.createContext(r);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);