"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[142],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=o,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||r;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9529:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),o=(n(7294),n(4137));const r={title:"Single-file web API services with .NET 5 and ASP.NET Core",tags:["ASP-NET-CORE","WEB-SERVICE","TOP-LEVEL-STATEMENTS"],authors:["korzh","melnalex"],slug:"single-file-web-service-aspnetcore"},i="Single-file web API services with .NET 5 and ASP.NET Core",s={permalink:"/blog/single-file-web-service-aspnetcore",source:"@site/blog/2021-04-15-single-file-web-service-aspnetcore/index.md",title:"Single-file web API services with .NET 5 and ASP.NET Core",description:"Introduction",date:"2021-04-15T00:00:00.000Z",formattedDate:"April 15, 2021",tags:[{label:"ASP-NET-CORE",permalink:"/blog/tags/asp-net-core"},{label:"WEB-SERVICE",permalink:"/blog/tags/web-service"},{label:"TOP-LEVEL-STATEMENTS",permalink:"/blog/tags/top-level-statements"}],readingTime:3.27,hasTruncateMarker:!0,authors:[{name:"Serhii Korzh",title:"Team Lead & Maintainer of EasyQuery",url:"https://github.com/korzh",imageURL:"https://github.com/korzh.png",key:"korzh"},{name:"Oleksandr Melnychenko",title:"Maintainer of EasyQuery & Localizer",url:"https://github.com/melnalex",imageURL:"https://github.com/melnalex.png",key:"melnalex"}],frontMatter:{title:"Single-file web API services with .NET 5 and ASP.NET Core",tags:["ASP-NET-CORE","WEB-SERVICE","TOP-LEVEL-STATEMENTS"],authors:["korzh","melnalex"],slug:"single-file-web-service-aspnetcore"},prevItem:{title:"Using TypeScript with WebPack in ASP.NET Core projects",permalink:"/blog/typescript-webpack-aspnetcore"},nextItem:{title:"CRUD operations in ASP.NET Core with EasyData library",permalink:"/blog/crud-asp-net-core-with-easydata"}},l={authorsImageUrls:[void 0,void 0]},p=[{value:"Introduction",id:"introduction",level:2},{value:"Single code file ASP.NET Core web service",id:"single-code-file-aspnet-core-web-service",level:2},{value:"Top-level statements",id:"top-level-statements",level:3},{value:"Creating a host",id:"creating-a-host",level:3},{value:"Setting up the web application",id:"setting-up-the-web-application",level:3},{value:"Running the app",id:"running-the-app",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(9169).Z,width:"1800",height:"951"})),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"There are many ways to create a web application today. We have a lot of different platforms, frameworks, and libraries: PHP, Python, Java, NodeJS, and a dozen of others."),(0,o.kt)("p",null,"While ASP.NET (Core) was always a good choice for developing enterprise-level web applications (with many complex web pages, some Web API endpoints, static resources, etc.),\nit's never been the best choice for creating a small web service with just a few endpoints to handle REST API requests in JSON or plain text formats."),(0,o.kt)("p",null,"Well, that was true until .NET 5 was released last year. With support for top-level statements and new features in C# language, .NET 5 allows us to create a solid web service in just a few minutes and with a single code file."),(0,o.kt)("h2",{id:"single-code-file-aspnet-core-web-service"},"Single code file ASP.NET Core web service"),(0,o.kt)("p",null,'Below you will find an example of a very basic "echo" web service with only one endpoint that just takes the content of a POST request and returns it back in JSON format. Not quite a real-world task of course, but enough for demonstration purposes.'),(0,o.kt)("p",null,"So, to create our single-code-file web service just open your terminal, create an empty folder and type the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"dotnet new web\n")),(0,o.kt)("p",null,"This command will create a simple ASP.NET Core project with two code files: ",(0,o.kt)("inlineCode",{parentName:"p"},"Program.cs")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Startup.cs"),"."),(0,o.kt)("p",null,"Since our purpose is to get only one file, we remove ",(0,o.kt)("inlineCode",{parentName:"p"},"Startup.cs"),". Yeah, it's that simple."),(0,o.kt)("p",null,"After that just copy/paste the following piece of code into ",(0,o.kt)("inlineCode",{parentName:"p"},"Program.cs")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'using System.IO;\nusing System.Net.Mime;\n\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Hosting;\n\n\nHost.CreateDefaultBuilder(args)\n    .ConfigureWebHostDefaults(webBuilder => webBuilder\n        .Configure(app => app.Run(async context => {\n            if (context.Request.Path == "/api/echo" && context.Request.Method == "POST") {\n                //getting the content of our POST request\n                using var reader = new StreamReader(context.Request.Body);\n                var content = await reader.ReadToEndAsync();\n\n                //sending it back in the response\n                context.Response.ContentType = MediaTypeNames.Text.Plain;\n                await context.Response.WriteAsync(content);\n            }\n            else {\n                //Return 404 for any other endpoint\n                context.Response.StatusCode = StatusCodes.Status404NotFound;\n                await context.Response.WriteAsync($"WRONG ENDPOINT: {context.Request.Path.ToString()}. Use POST request to /api/echo instead");\n            }\n        })))\n    .Build().Run();\n')),(0,o.kt)("p",null,"Let's take a closer look what happens here."),(0,o.kt)("h3",{id:"top-level-statements"},"Top-level statements"),(0,o.kt)("p",null,"Fist we have a block of ",(0,o.kt)("inlineCode",{parentName:"p"},"using")," statement. That's usual for any C# file. Nothing special."),(0,o.kt)("p",null,"After that, we start straight with an instruction. We call ",(0,o.kt)("inlineCode",{parentName:"p"},"CreateDefaultBuilder()")," method of ",(0,o.kt)("inlineCode",{parentName:"p"},"Host")," class.\nIf you've had experience with C# before, you may be a little bit confused by this approach. No namespaces, no class definitions.\nYou may even say that this piece of code has the wrong syntax and will not be compiled."),(0,o.kt)("p",null,"But it will. It's possible to do now with C# 9 and it's called ",(0,o.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/top-level-statements"},"top-level statements"),"."),(0,o.kt)("h3",{id:"creating-a-host"},"Creating a host"),(0,o.kt)("p",null,"As we already mentioned above the only instruction we actually have in our little program is ",(0,o.kt)("inlineCode",{parentName:"p"},"Host.CreateDefaultBuilder()")," call.\nIt creates a ",(0,o.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host"},"generic host builder")," with default settings for logging, configuration, and Dependency Injection container."),(0,o.kt)("h3",{id:"setting-up-the-web-application"},"Setting up the web application"),(0,o.kt)("p",null,"After that, the ",(0,o.kt)("inlineCode",{parentName:"p"},"ConfigureWebHostDefaults")," method loads the configuration, set Kestrel as the webserver, enables IIS integrations, and adds some default middlewares."),(0,o.kt)("p",null,"Finally, we call ",(0,o.kt)("inlineCode",{parentName:"p"},"Configure")," method to set up the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/"},"middleware pipeline"),", or, to define the only middleware that will actually process all requests to our web service (with that ",(0,o.kt)("inlineCode",{parentName:"p"},"app.Run(...)")," call)."),(0,o.kt)("p",null,"The next piece of code is self-explanatory. If it's a POST request to ",(0,o.kt)("inlineCode",{parentName:"p"},"/api/echo")," we read the content of the request's body and just write it back to the response stream. Otherwise, we return the 404 code with some error message."),(0,o.kt)("p",null,"As I mentioned above, this is a very basic example of a microweb service, but I intentionally made it simple to show how everything works in general without going into detail."),(0,o.kt)("h2",{id:"running-the-app"},"Running the app"),(0,o.kt)("p",null,"To run this simple web service just type in the terminal (while you are in the project's directory):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"dotnet run\n")),(0,o.kt)("p",null,"Here is what you get in response by sending a POST request to /api/echo using ",(0,o.kt)("a",{parentName:"p",href:"https://www.postman.com/"},"Postman utility"),":"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"POST request to /api/echo via Postman",src:n(6271).Z,width:"734",height:"506"})))}d.isMDXComponent=!0},6271:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/postman-echo01-ebead691e5e39041afe804af4aca8eed.png"},9169:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/simple-webservice-abc11c8c7d9c3cbcb922a91416c88af6.jpg"}}]);