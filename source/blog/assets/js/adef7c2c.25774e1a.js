"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6124],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=i,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7123:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(4137));const o={title:"ASP.NET Identity - Use claims to store additional user's data",tags:["ASP-NET-CORE","ASP-NET-IDENTITY","CLAIMS"],authors:["korzh","melnalex"],slug:"aspnet-identity-store-user-data-in-claims"},r="ASP.NET Identity: Use claims to store additional user's data",l={permalink:"/blog/aspnet-identity-store-user-data-in-claims",source:"@site/blog/2018-01-22-ASP-NET-Identity-Use-claims-to-store-additional-users-data/index.md",title:"ASP.NET Identity - Use claims to store additional user's data",description:"NB: The solution presented in this article will work in version 2.0 of ASP.NET Core only!",date:"2018-01-22T00:00:00.000Z",formattedDate:"January 22, 2018",tags:[{label:"ASP-NET-CORE",permalink:"/blog/tags/asp-net-core"},{label:"ASP-NET-IDENTITY",permalink:"/blog/tags/asp-net-identity"},{label:"CLAIMS",permalink:"/blog/tags/claims"}],readingTime:4.765,hasTruncateMarker:!0,authors:[{name:"Serhii Korzh",title:"Team Lead & Maintainer of EasyQuery",url:"https://github.com/korzh",imageURL:"https://github.com/korzh.png",key:"korzh"},{name:"Oleksandr Melnychenko",title:"Maintainer of EasyQuery & Localizer",url:"https://github.com/melnalex",imageURL:"https://github.com/melnalex.png",key:"melnalex"}],frontMatter:{title:"ASP.NET Identity - Use claims to store additional user's data",tags:["ASP-NET-CORE","ASP-NET-IDENTITY","CLAIMS"],authors:["korzh","melnalex"],slug:"aspnet-identity-store-user-data-in-claims"},prevItem:{title:"ASP.NET Identity - Weakening password policies",permalink:"/blog/aspnet-identity-weakening-password-policies"},nextItem:{title:"Welcome",permalink:"/blog/Welcome"}},s={authorsImageUrls:[void 0,void 0]},p=[{value:"Introduction",id:"introduction",level:2},{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2},{value:"0. Preparations: ContactName property in ApplicationUser and updated views",id:"0-preparations-contactname-property-in-applicationuser-and-updated-views",level:3},{value:"1. Adding a user&#39;s name to the claims",id:"1-adding-a-users-name-to-the-claims",level:3},{value:"2. Accessing new claim from the views",id:"2-accessing-new-claim-from-the-views",level:3}],c={toc:p},d="wrapper";function m(e){let{components:t,...o}=e;return(0,i.kt)(d,(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(8517).Z,width:"1280",height:"671"})),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"NB"),": The solution presented in this article will work in version 2.0 of ASP.NET Core only!",(0,i.kt)("br",{parentName:"p"}),"\n","If you use a newer version of ASP.NET Core (e.g. 2.2) - here is a ","[new post on the same topic]","({{ 'ancid05' | internal_path}}).")),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"With this post, we start a series of articles that describe the different aspects of using ASP.NET Identity in your ASP.NET (Core) applications.\nAll the code in the following articles was built for and tested with ASP.NET Core 2.0. However, in most cases, it will work well in earlier versions of .NET framework (4.x) and ASP.NET Identity library (2.x)"),(0,i.kt)("p",null,"One more note. We are NOT going to do an introduction to or describe the basic principles of ASP.NET Core in general or APS.NET Identity in particular. The following material is more for the developers who already have some experience with both of them. If you don't - please start by reading the tutorials on ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/aspnet/core/"},"ASP.NET Core documentation")," website and creating your first web app with it."),(0,i.kt)("h2",{id:"problem"},"Problem"),(0,i.kt)("p",null,'Let\'s suppose we created a new ASP.NET Core project using one of the default templates and chose "Individual user account" option for "Authentication".'),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"ASP.NET Identity new project",src:n(2183).Z,title:"ASP.NET Core - new project with ASP.NET Identity",width:"784",height:"513"})),(0,i.kt)("p",null,"Now when we start that newly created project and register new user we will see something like ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello YourEmailAddress@YourCompany.com")," in the top right part of the index web-page."),(0,i.kt)("p",null,"Obviously, such kind of greeting is useless in a real-world application and you would like to see the name of the currently logged user there instead (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello John Doe"),").",(0,i.kt)("br",{parentName:"p"}),"\n","Let's figure out how to do it."),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("p",null,"Here we guess you are already familiar with the claims and ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/aspnet/core/security/authorization/claims"},"claims-based approach")," for authorization used in ASP.NET Core Identity. If not - please read ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/aspnet/core/security/"},"ASP.NET Core Security")," documentation first."),(0,i.kt)("p",null,"To achieve our goal we need to do 2 things:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Add necessary information to the list of claims stored with the user's identity."),(0,i.kt)("li",{parentName:"ol"},"Have a simple way of getting that info when needed.")),(0,i.kt)("p",null,"But before implementing these two tasks we will need to add a new ContactName field to our model class and update our registration and user management pages accordingly."),(0,i.kt)("h3",{id:"0-preparations-contactname-property-in-applicationuser-and-updated-views"},"0. Preparations: ContactName property in ApplicationUser and updated views"),(0,i.kt)("p",null,"Let's add a new ",(0,i.kt)("inlineCode",{parentName:"p"},"ContactName")," property to the ApplicationUser model class (you can find it in ",(0,i.kt)("inlineCode",{parentName:"p"},"Models")," folder of your project):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"    public class ApplicationUser : IdentityUser {\n        public string ContactName { get; set; }\n    }\n")),(0,i.kt)("p",null,"Of course, you can add here some other properties you would like to store with your user's account, like ",(0,i.kt)("inlineCode",{parentName:"p"},"FirstName"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"LastName"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Country"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Address"),", etc. but for simplicity, we will consider only one additional property."),(0,i.kt)("p",null,"The next step will be adding a new migration and updating your database.\nJust run the following commands from the terminal windows in your project's folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"dotnet ef migrations add ContactNameField\n")),(0,i.kt)("p",null,"and then"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"dotnet ef database update\n")),(0,i.kt)("p",null,"Finally, we will need to add the new field to the views:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Models\\AccountViewModels\\RegisterViewModel.cs"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'    public class RegisterViewModel\n    {\n        [Required]\n        [Display(Name = "Name")]\n        public string ContactName { get; set; }\n       .     .     .     .     .     .\n')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Views/Account/Register.chstml"),"\nAdd the following piece of markup before ",(0,i.kt)("inlineCode",{parentName:"li"},"Email")," form group")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'            <div class="form-group">\n                <label asp-for="ContactName"></label>\n                <input asp-for="ContactName" class="form-control" />\n                <span asp-validation-for="ContactName" class="text-danger"></span>\n            </div>\n')),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Controllers/AccountController"),"\nUpdate the following line in the Register method:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"var user = new ApplicationUser { ContactName=model.ContactName, UserName = model.Email, Email = model.Email };\n")),(0,i.kt)("p",null,"After that, perform the similar steps in"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"View/Manage/Index.cshtml"),","),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Models/ManageViewModels/IndexViewModel.cs"),"\nand in"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Index")," method in ",(0,i.kt)("inlineCode",{parentName:"li"},"ManageControler")," class.")),(0,i.kt)("p",null,"Try to run your project and open the registration page. Now it should look this way:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Registration form with ContactName field",src:n(8235).Z,title:"Registration form with ContactName field",width:"500",height:"487"})),(0,i.kt)("p",null,"Now, when all the preparations are finished we can return back to our main tasks."),(0,i.kt)("h3",{id:"1-adding-a-users-name-to-the-claims"},"1. Adding a user's name to the claims"),(0,i.kt)("p",null,"It appears that the main task is much easier than all the preparations we made before. :)"),(0,i.kt)("p",null,"The quickest way to add some additional claims to the user's identity is to create your own implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"IUserClaimsPrincipalFactory")," and register it in DI container."),(0,i.kt)("p",null,"Here is the implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"IUserClaimsPrincipalFactory")," which adds the value stored in ",(0,i.kt)("inlineCode",{parentName:"p"},"ContactName")," property to the user's claims:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c#"},'    public class MyUserClaimsPrincipalFactory : UserClaimsPrincipalFactory<ApplicationUser, IdentityRole>\n    {\n        public MyUserClaimsPrincipalFactory(\n            UserManager<ApplicationUser> userManager,\n            RoleManager<IdentityRole> roleManager,\n            IOptions<IdentityOptions> optionsAccessor)\n            : base(userManager, roleManager, optionsAccessor) {\n        }\n\n        protected override async Task<ClaimsIdentity> GenerateClaimsAsync(ApplicationUser user) {\n            var identity = await base.GenerateClaimsAsync(user);\n            identity.AddClaim(new Claim("ContactName", user.ContactName ?? ""));\n            return identity;\n        }\n    } \n')),(0,i.kt)("p",null,"And then register it in DI container in ",(0,i.kt)("inlineCode",{parentName:"p"},"ConfigureServices")," methods of your Startup class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c#"},"public void ConfigureServices(IServiceCollection services) {\n    .     .     .     .      . \n    services.AddIdentity<ApplicationUser, IdentityRole>()\n        .AddEntityFrameworkStores<ApplicationDbContext>()\n        .AddDefaultTokenProviders();\n     \n    //add the following line of code\n    services.AddScoped<IUserClaimsPrincipalFactory<ApplicationUser>, MyUserClaimsPrincipalFactory>();\n    .     .     .     .      . \n} \n")),(0,i.kt)("h3",{id:"2-accessing-new-claim-from-the-views"},"2. Accessing new claim from the views"),(0,i.kt)("p",null,"Now we have a new claim associated with our user's identity. That's fine. But how we can get it and render on our view(s)?\nEasy. Any view in your application has access to ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," object which is an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"ClaimsPrincipal")," class."),(0,i.kt)("p",null,"This object actually holds the list of all claims associated with the current user and you can call its ",(0,i.kt)("inlineCode",{parentName:"p"},"FindFirst")," method to get the necessary claim and then read the ",(0,i.kt)("inlineCode",{parentName:"p"},"Value")," property of the found claim."),(0,i.kt)("p",null,"So, we just need to open ",(0,i.kt)("inlineCode",{parentName:"p"},"_LoginPartical.cshtml")," file in ",(0,i.kt)("inlineCode",{parentName:"p"},"Views/Shared/")," folder and replace the following line:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'    <a asp-area="" asp-controller="Manage" asp-action="Index" title="Manage">Hello @UserManager.GetUserName(User)!</a>\n')),(0,i.kt)("p",null,"with this one:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'    <a asp-area="" asp-controller="Manage" asp-action="Index" title="Manage">Hello @(User.FindFirst("ContactName").Value)!</a>\n')),(0,i.kt)("p",null,"Now you instead of something like ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello john.doe@yourcompany.com")," at the top of your web-page you should see something like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"ASP.NET Identity contact name",src:n(7639).Z,title:"ASP.NET Core - renderring contact name instead of user's ID",width:"1227",height:"593"})))}m.isMDXComponent=!0},7639:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/anc-identity-contact-name-ed59ec997ccfb2bc9b65c5c87084dd00.png"},2183:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/anc-identity-newapp01-6a9adf9d6273675e0a7544bbbbb82dda.png"},8235:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/anc-identity-registration-73074e8ef02572e623d90c824f815d0a.png"},8517:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/auth-claims-01-93567628ad95a0df58d965e5619e2166.png"}}]);