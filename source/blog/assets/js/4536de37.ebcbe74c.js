"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5244],{4831:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=t(5893),n=t(1151);const a={title:"ASP.NET Identity - Adding master password",tags:["ASP-NET-CORE","ASP-NET-IDENTITY","PASSWORD-HASHER"],slug:"aspnet-identity-master-password"},i="ASP.NET Identity: Adding master password",o={permalink:"/blog/aspnet-identity-master-password",source:"@site/blog/2018-04-08-aspnet-identity-master-password/index.md",title:"ASP.NET Identity - Adding master password",description:"Problem",date:"2018-04-08T00:00:00.000Z",formattedDate:"April 8, 2018",tags:[{label:"ASP-NET-CORE",permalink:"/blog/tags/asp-net-core"},{label:"ASP-NET-IDENTITY",permalink:"/blog/tags/asp-net-identity"},{label:"PASSWORD-HASHER",permalink:"/blog/tags/password-hasher"}],readingTime:.785,hasTruncateMarker:!0,authors:[],frontMatter:{title:"ASP.NET Identity - Adding master password",tags:["ASP-NET-CORE","ASP-NET-IDENTITY","PASSWORD-HASHER"],slug:"aspnet-identity-master-password"},unlisted:!1,prevItem:{title:"Using embedded resources in testing projects",permalink:"/blog/embedded-resources-testing-projects"},nextItem:{title:"ASP.NET Identity - Migrating users' passwords from ASP.NET Membership",permalink:"/blog/aspnet-identity-migrate-membership-passwords"}},d={authorsImageUrls:[]},l=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}];function p(e){const s={a:"a",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{src:t(7734).Z+"",width:"1280",height:"896"})}),"\n",(0,r.jsx)(s.h2,{id:"problem",children:"Problem"}),"\n",(0,r.jsxs)(s.p,{children:['Sometimes, when you build a multi-tenant web-application you may need to set up a "master password" to your system - the password which allows some administrator to login to any user\'s account. Something similar to ',(0,r.jsx)(s.code,{children:"su"})," command in Unix/Linux systems."]}),"\n",(0,r.jsx)(s.h2,{id:"solution",children:"Solution"}),"\n",(0,r.jsxs)(s.p,{children:["As with the ",(0,r.jsx)(s.a,{href:"/blog/aspnet-identity-migrate-membership-passwords",children:"previous task"}),", the solution is quite simple - thanks to the power and flexibility of ASP.NET Core application architecture."]}),"\n",(0,r.jsxs)(s.p,{children:["We just need to create a new implementation of ",(0,r.jsx)(s.code,{children:"IPassowrdHasher"})," interface and register it in dependency injection container:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-c#",children:'//PasswordHasherWithMasterPassword.cs\n.   .   .   .   .   .\npublic class PasswordHasherWithMasterPassword : IPasswordHasher<ApplicationUser>\t\n{\n\tprivate IPasswordHasher<ApplicationUser> _identityPasswordHasher = new PasswordHasher<ApplicationUser>();\n\n\tprivate static string _masterPassword = "qwerty12345";\n\n    public PasswordVerificationResult VerifyHashedPassword(ApplicationUser user, string hashedPassword, string providedPassword) {\n\t\tif (providedPassword == _masterPassword) {\n\t\t\t\treturn PasswordVerificationResult.Success;\n\t\t}\n\t\t\n        return _identityPasswordHasher.VerifyHashedPassword(user, hashedPassword, providedPassword);\n\t}\n}\n\n\n//Startup.cs\n.   .   .   .   .   .\npublic void ConfigureServices(IServiceCollection services)\n{\n    .   .   .   .   .   .\n \n    services.AddSingleton<IPasswordHasher<ApplicationUser>, PasswordHasherWithMasterPassword>();\n}\n'})})]})}function c(e={}){const{wrapper:s}={...(0,n.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},7734:(e,s,t)=>{t.d(s,{Z:()=>r});const r=t.p+"assets/images/password-master-dc1a42fe09613d08b264ad7d8910ebb7.jpg"},1151:(e,s,t)=>{t.d(s,{Z:()=>o,a:()=>i});var r=t(7294);const n={},a=r.createContext(n);function i(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);