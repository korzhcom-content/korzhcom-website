"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[461],{1721:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(5893),s=n(1151);const r={title:"Single-file web API services with .NET 5 and ASP.NET Core",tags:["ASP-NET-CORE","WEB-SERVICE","TOP-LEVEL-STATEMENTS"],slug:"single-file-web-service-aspnetcore"},i="Single-file web API services with .NET 5 and ASP.NET Core",o={permalink:"/blog/single-file-web-service-aspnetcore",source:"@site/blog/2021-04-15-single-file-web-service-aspnetcore/index.md",title:"Single-file web API services with .NET 5 and ASP.NET Core",description:"Introduction",date:"2021-04-15T00:00:00.000Z",formattedDate:"April 15, 2021",tags:[{label:"ASP-NET-CORE",permalink:"/blog/tags/asp-net-core"},{label:"WEB-SERVICE",permalink:"/blog/tags/web-service"},{label:"TOP-LEVEL-STATEMENTS",permalink:"/blog/tags/top-level-statements"}],readingTime:3.27,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Single-file web API services with .NET 5 and ASP.NET Core",tags:["ASP-NET-CORE","WEB-SERVICE","TOP-LEVEL-STATEMENTS"],slug:"single-file-web-service-aspnetcore"},unlisted:!1,prevItem:{title:"ASP.NET Core default project structure explained (part 1)",permalink:"/blog/asp-net-core-default-project-structure-explained-part-1"},nextItem:{title:"CRUD operations in ASP.NET Core with EasyData library",permalink:"/blog/crud-asp-net-core-with-easydata"}},l={authorsImageUrls:[]},c=[{value:"Introduction",id:"introduction",level:2}];function p(e){const t={h2:"h2",img:"img",p:"p",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:n(9169).Z+"",width:"1800",height:"951"})}),"\n",(0,a.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(t.p,{children:"There are many ways to create a web application today. We have a lot of different platforms, frameworks, and libraries: PHP, Python, Java, NodeJS, and a dozen of others."}),"\n",(0,a.jsx)(t.p,{children:"While ASP.NET (Core) was always a good choice for developing enterprise-level web applications (with many complex web pages, some Web API endpoints, static resources, etc.),\nit's never been the best choice for creating a small web service with just a few endpoints to handle REST API requests in JSON or plain text formats."}),"\n",(0,a.jsx)(t.p,{children:"Well, that was true until .NET 5 was released last year. With support for top-level statements and new features in C# language, .NET 5 allows us to create a solid web service in just a few minutes and with a single code file."})]})}function d(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},9169:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/simple-webservice-abc11c8c7d9c3cbcb922a91416c88af6.jpg"},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>i});var a=n(7294);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);