"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5421],{2072:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var i=t(5893),s=t(1151);const a={title:"Add extra user claims in ASP.NET Core webapp",tags:["ASP-NET-CORE","ASP-NET-IDENTITY","CLAIMS"],slug:"add-extra-user-claims-aspnet-core-webapp"},o="Add extra user claims in ASP.NET Core webapp",r={permalink:"/blog/add-extra-user-claims-aspnet-core-webapp",source:"@site/blog/2019-05-07-add-extra-user-claims-aspnet-core-webapp/index.md",title:"Add extra user claims in ASP.NET Core webapp",description:"Introduction",date:"2019-05-07T00:00:00.000Z",formattedDate:"May 7, 2019",tags:[{label:"ASP-NET-CORE",permalink:"/blog/tags/asp-net-core"},{label:"ASP-NET-IDENTITY",permalink:"/blog/tags/asp-net-identity"},{label:"CLAIMS",permalink:"/blog/tags/claims"}],readingTime:6.52,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Add extra user claims in ASP.NET Core webapp",tags:["ASP-NET-CORE","ASP-NET-IDENTITY","CLAIMS"],slug:"add-extra-user-claims-aspnet-core-webapp"},unlisted:!1,prevItem:{title:"Dependency Injection Put Simply",permalink:"/blog/dependency-injection-explanation-in-simple-words"},nextItem:{title:"Using embedded resources in testing projects",permalink:"/blog/embedded-resources-testing-projects"}},c={authorsImageUrls:[]},l=[{value:"Introduction",id:"introduction",level:2},{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2},{value:"Step 0: Preparations",id:"step-0-preparations",level:2},{value:"0.1 New ApplicationUser class",id:"01-new-applicationuser-class",level:3},{value:"0.2 Replace <code>IdentityUser</code> with <code>ApplicationUser</code>",id:"02-replace-identityuser-with-applicationuser",level:3},{value:"0.3. Update your database.",id:"03-update-your-database",level:3},{value:"0.4. Update &quot;User Profile&quot; page",id:"04-update-user-profile-page",level:3},{value:"Step 1: Adding the contact name to the claims",id:"step-1-adding-the-contact-name-to-the-claims",level:2},{value:"Create your own &quot;claims principal&quot; factory",id:"create-your-own-claims-principal-factory",level:3},{value:"Register new class in DI container",id:"register-new-class-in-di-container",level:3},{value:"Step 2: Accessing new claim from the views",id:"step-2-accessing-new-claim-from-the-views",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(6278).Z+"",width:"1920",height:"1048"})}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:["This is a second edition of the ",(0,i.jsx)(n.a,{href:"/blog/aspnet-identity-store-user-data-in-claims",children:"previous post on the same topic"}),". The reason why I wrote this one is because of some drastic changes made in ASP.NET Core Authentication system from version 2.0 to version 2.2 - so most of the code presented in the first article doesn't work with the new version."]}),"\n",(0,i.jsx)(n.p,{children:"So, the code in the following articles was built for and tested with ASP.NET Core 2.2. The main concept, however, is still the same and were not changed since ASP.NET Identity 2.0 (I guess)."}),"\n",(0,i.jsx)(n.p,{children:"As in the previous case, we will start with a description of the problem."}),"\n",(0,i.jsx)(n.h2,{id:"problem",children:"Problem"}),"\n",(0,i.jsx)(n.p,{children:'Let\'s suppose we created a new ASP.NET Core project using one of the default templates and chose "Individual user account" option for "Authentication".'}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"ASP.NET Identity new project",src:t(9700).Z+"",title:"ASP.NET Core - new webapp project with an authentication",width:"800",height:"519"})}),"\n",(0,i.jsxs)(n.p,{children:["Now when we start that newly created project and register new user we will see something like ",(0,i.jsx)(n.code,{children:"Hello YourEmailAddress@YourCompany.com"})," in the top right part of the index web-page."]}),"\n",(0,i.jsxs)(n.p,{children:["Obviously, such kind of greeting is useless in a real-world application and you would like to see the name of the currently logged user there instead (e.g. ",(0,i.jsx)(n.code,{children:"Hello John Doe"}),").",(0,i.jsx)(n.br,{}),"\n","Let's figure out how to do it."]}),"\n",(0,i.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,i.jsxs)(n.p,{children:["Here we guess you are already familiar with the claims and ",(0,i.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/aspnet/core/security/authorization/claims",children:"claims-based approach"})," for authorization used in ASP.NET Core Identity. If not - please read ",(0,i.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/aspnet/core/security/",children:"ASP.NET Core Security"})," article first."]}),"\n",(0,i.jsx)(n.p,{children:"To achieve our goal we need to do 2 things:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Add necessary information to the list of the claims attached to the user's identity."}),"\n",(0,i.jsx)(n.li,{children:"Have a simple way of getting that info when needed."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"But before implementing these two tasks we will need to add a new ContactName field to our model class and update our registration and user management pages accordingly."}),"\n",(0,i.jsx)(n.h2,{id:"step-0-preparations",children:"Step 0: Preparations"}),"\n",(0,i.jsxs)(n.p,{children:["Before we can add a new claim to a user object (the one you can access via ",(0,i.jsx)(n.code,{children:"HttpContext.User"}),") we need a place to store that additional info somewhere.\nHere I am going to describe how to get this done for a new ASP.NET Core project built by a default template."]}),"\n",(0,i.jsx)(n.p,{children:"If already you work with your real-world application - you most probably already did similar changes before.\nIn this case, you can skip this section and move right to the step #1."}),"\n",(0,i.jsx)(n.h3,{id:"01-new-applicationuser-class",children:"0.1 New ApplicationUser class"}),"\n",(0,i.jsxs)(n.p,{children:["Add a new  ",(0,i.jsx)(n.code,{children:"ApplicationUser"})," class with `ContactName' property:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c#",children:"    public class ApplicationUser : IdentityUser\n    {\n        public string ContactName { get; set; }\n    }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Of course, you can add more properties to store some additional information with the user account.\nFor example: ",(0,i.jsx)(n.code,{children:"FirstName"}),", ",(0,i.jsx)(n.code,{children:"LastName"}),", ",(0,i.jsx)(n.code,{children:"Country"}),", ",(0,i.jsx)(n.code,{children:"Address"}),", etc. All of them can be placed to claims the same way as ",(0,i.jsx)(n.code,{children:"ContactName"})," we discuss here."]}),"\n",(0,i.jsxs)(n.h3,{id:"02-replace-identityuser-with-applicationuser",children:["0.2 Replace ",(0,i.jsx)(n.code,{children:"IdentityUser"})," with ",(0,i.jsx)(n.code,{children:"ApplicationUser"})]}),"\n",(0,i.jsxs)(n.p,{children:["Now you need to replace ",(0,i.jsx)(n.code,{children:"IdentityUser"})," with ",(0,i.jsx)(n.code,{children:"ApplicationUser"})," everywhere in your project."]}),"\n",(0,i.jsxs)(n.p,{children:["The default ASP.NET Core template uses predefined ",(0,i.jsx)(n.code,{children:"IdentityUser"})," type everywhere.\nSince we what to use ",(0,i.jsx)(n.code,{children:"ApplicationUser"})," instead of it - we need to search for all inclusions of ",(0,i.jsx)(n.code,{children:"IdentityUser"})," in your project and replace with ",(0,i.jsx)(n.code,{children:"ApplicationUser"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["It will include your DbContext class, one line in ",(0,i.jsx)(n.code,{children:"Startup"})," class (in ",(0,i.jsx)(n.code,{children:"ConfigureServices"})," method) and two lines with ",(0,i.jsx)(n.code,{children:"@inject"})," directives in ",(0,i.jsx)(n.code,{children:"_LoginPartial.cshtml"})," view."]}),"\n",(0,i.jsxs)(n.p,{children:["Here is how your new ",(0,i.jsx)(n.code,{children:"ApplicationDbContext"})," class will look like after that:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c#",children:"public class ApplicationDbContext : IdentityDbContext<ApplicationUser, IdentityRole, string>\n{\n    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)\n        : base(options)\n    {\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"03-update-your-database",children:"0.3. Update your database."}),"\n",(0,i.jsx)(n.p,{children:"Now you need to add a new migration and then update your DB.\nJust run the following 2 commands from your project's folder:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:"dotnet ef migrations add AddUserContactName\n\ndotnet ef database update\n"})}),"\n",(0,i.jsx)(n.h3,{id:"04-update-user-profile-page",children:'0.4. Update "User Profile" page'}),"\n",(0,i.jsx)(n.p,{children:'Finally, we will need to add our new field to the "User Profile" page to make it possible for users to modify it.'}),"\n",(0,i.jsxs)(n.p,{children:["The default ASP.NET Core template uses all identity-related pages directly from a special Razor UI library (",(0,i.jsx)(n.code,{children:"Microsoft.AspNetCore.Identity.UI"}),").\nThe good news is: we can override any of those pages if we want. Here are the steps we need to do:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Right-click on your project in VS and select Add | New Scaffolding item."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:['In the "Add Scaffold" dialog select ',(0,i.jsx)(n.code,{children:"Identity"})," on the left side tree and then ",(0,i.jsx)(n.code,{children:"Identity"}),' in the main list and click "Add".']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["In the dialog that appears select only ",(0,i.jsx)(n.code,{children:"Account\\Manage\\Index"})," page and then click on \"Add\" as well.\nWhen the process is finished you will find a new page 'Index.cshtml' in ",(0,i.jsx)(n.code,{children:"Areas/Identity/Pages"})," folder."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["After that make the following changes to that ",(0,i.jsx)(n.code,{children:"Index"})," page:"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In the Index.cshtml itself add the following piece of markup right before ",(0,i.jsx)(n.code,{children:"update-profile-button"})," button."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<div class="form-group">\n    <label asp-for="Input.ContactName"></label>\n    <input asp-for="Input.ContactName" class="form-control" />\n    <span asp-validation-for="Input.ContactName" class="text-danger"></span>\n</div>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Then, in the code-behind file ",(0,i.jsx)(n.code,{children:"Index.cshtml.cs"})," we need to modify the view model:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c#",children:"public class InputModel\n{\n    .   .   .   .   .   .\n\n    public string ContactName { get; set; }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["then the ",(0,i.jsx)(n.code,{children:"OnGetAsync"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c#",children:"public async Task<IActionResult> OnGetAsync()\n{\n    .   .   .   .   .   .\n\t\n    Input = new InputModel\n\t{\n\t\tEmail = email,\n\t\tPhoneNumber = phoneNumber,\n\t\tContactName = user.ContactName //add this line\n\t};\n\n    .   .   .   .   .   .\n\t\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["and the ",(0,i.jsx)(n.code,{children:"OnPutAsync"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c#",children:'public async Task<IActionResult> OnPostAsync()\n{\n    .    .    .    .    .    .    .\n\n\tif (Input.ContactName != user.ContactName) {\n\t\tuser.ContactName = Input.ContactName;\n\t\tawait _userManager.UpdateAsync(user);\n\t}\n\n\tawait _signInManager.RefreshSignInAsync(user);\n\tStatusMessage = "Your profile has been updated";\n\treturn RedirectToPage();\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"So, after all the changes described above your User Profile page after that registration will look like this:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"User Profile form with ContactName field",src:t(7637).Z+"",title:"User Profile form with ContactName field",width:"796",height:"615"})}),"\n",(0,i.jsx)(n.p,{children:"Now, all the preparations are finished we can return back to our main task."}),"\n",(0,i.jsx)(n.h2,{id:"step-1-adding-the-contact-name-to-the-claims",children:"Step 1: Adding the contact name to the claims"}),"\n",(0,i.jsxs)(n.p,{children:["A funny thing: the main task is much easier than all the preparations we made before. :)\nMoreover, it became even easier because of some changes in version 2.2 of ASP.NET Core (in comparison with version 2.0 as ",(0,i.jsx)(n.a,{href:"/blog/add-extra-user-claims-aspnet-core-webapp",children:"we described before"})," )"]}),"\n",(0,i.jsx)(n.p,{children:"There are only two simple steps:"}),"\n",(0,i.jsx)(n.h3,{id:"create-your-own-claims-principal-factory",children:'Create your own "claims principal" factory'}),"\n",(0,i.jsxs)(n.p,{children:["We need an implementation ",(0,i.jsx)(n.code,{children:"IUserClaimsPrincipalFactory"})," which will add necessary information (",(0,i.jsx)(n.code,{children:"ContactName"})," in our case) to the user claims.\nThe simplest way to do it - is to derive our new class from the default implementation of ",(0,i.jsx)(n.code,{children:"IUserClaimsPrincipalFactory"})," and override one method: ",(0,i.jsx)(n.code,{children:"GenerateClaimsAsync"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c#",children:'public class MyUserClaimsPrincipalFactory : UserClaimsPrincipalFactory<ApplicationUser>\n{\n    public MyUserClaimsPrincipalFactory(\n        UserManager<ApplicationUser> userManager,\n        IOptions<IdentityOptions> optionsAccessor)\n        : base(userManager, optionsAccessor)\n    {\n    }\n\n    protected override async Task<ClaimsIdentity> GenerateClaimsAsync(ApplicationUser user)\n    {\n        var identity = await base.GenerateClaimsAsync(user);\n        identity.AddClaim(new Claim("ContactName", user.ContactName ?? "[Click to edit profile]"));\n        return identity;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"register-new-class-in-di-container",children:"Register new class in DI container"}),"\n",(0,i.jsxs)(n.p,{children:["Then we need to register our new class in the dependency injection container.\nThe best way for that - to use ",(0,i.jsx)(n.code,{children:"AddClaimsPrincipalFactory"})," extension method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c#",children:"public void ConfigureServices(IServiceCollection services) \n{\n    .     .     .     .      .\n    services.AddDefaultIdentity<ApplicationUser>()\n        .AddDefaultUI(UIFramework.Bootstrap4)\n        .AddEntityFrameworkStores<ApplicationDbContext>()\n        .AddClaimsPrincipalFactory<MyUserClaimsPrincipalFactory>();  //<---- add this line\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"step-2-accessing-new-claim-from-the-views",children:"Step 2: Accessing new claim from the views"}),"\n",(0,i.jsxs)(n.p,{children:["Now we have a new claim associated with our user's identity. That's fine. But how we can get it and render on our view(s)?\nEasy. Any view in your application has access to ",(0,i.jsx)(n.code,{children:"User"})," object which is an instance of ",(0,i.jsx)(n.code,{children:"ClaimsPrincipal"})," class."]}),"\n",(0,i.jsxs)(n.p,{children:["This object actually holds the list of all claims associated with the current user and you can call its ",(0,i.jsx)(n.code,{children:"FindFirst"})," method to get the necessary claim and then read the ",(0,i.jsx)(n.code,{children:"Value"})," property of that claim."]}),"\n",(0,i.jsxs)(n.p,{children:["So, we just need to open ",(0,i.jsx)(n.code,{children:"_LoginPartical.cshtml"})," file in ",(0,i.jsx)(n.code,{children:"Pages/Shared/"})," (or ",(0,i.jsx)(n.code,{children:"Views/Shared/"}),") folder and replace the following line:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<a asp-area="" asp-controller="Manage" asp-action="Index" title="Manage">Hello @User.Identity.Name!</a>\n'})}),"\n",(0,i.jsx)(n.p,{children:"with this one:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<a asp-area="" asp-controller="Manage" asp-action="Index" title="Manage">Hello @(User.FindFirst("ContactName").Value)!</a>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Now, instead of something like ",(0,i.jsx)(n.code,{children:"Hello john.doe@yourcompany.com"})," at the top of your web-page you should see something like this:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"ASP.NET Identity contact name",src:t(3585).Z+"",title:"ASP.NET Core - showing user&#39;s contact name instead of email",width:"772",height:"280"})}),"\n",(0,i.jsx)(n.p,{children:"That's all for now. Enjoy!"})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},6278:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/1_VrvS6Ky3clwfsf4llZMKnw-a03d015331066e5fcfdcefe7e4d6eed8.png"},9700:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/anc22-add-extra-claim01-0f1b5919b13c07ba5064f87e31a0eae0.png"},7637:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/anc22-add-extra-claim02-3ab405c1913546495101e4c14bdd5ec0.png"},3585:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/anc22-add-extra-claim03-a42b264e22a81cf6102f2a9df9c8beef.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>o});var i=t(7294);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);