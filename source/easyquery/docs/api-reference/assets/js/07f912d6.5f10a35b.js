"use strict";(self.webpackChunkeasy_query_docs_docusaurus=self.webpackChunkeasy_query_docs_docusaurus||[]).push([[7758],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),m=s(n),u=r,c=m["".concat(o,".").concat(u)]||m[u]||y[u]||l;return n?a.createElement(c,i(i({ref:t},d),{},{components:n})):a.createElement(c,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[m]="string"==typeof e?e:r,i[1]=p;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},88805:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>y,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={},i=void 0,p={unversionedId:"korzh-easyquery-namespace/linqtypeextensions-class",id:"korzh-easyquery-namespace/linqtypeextensions-class",title:"linqtypeextensions-class",description:"Contains different extension functions for working with refrection and types",source:"@site/docs/korzh-easyquery-namespace/linqtypeextensions-class.md",sourceDirName:"korzh-easyquery-namespace",slug:"/korzh-easyquery-namespace/linqtypeextensions-class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-namespace/linqtypeextensions-class",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"licensekeyresponse-class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-namespace/licensekeyresponse-class"},next:{title:"listvalueeditorxmlserializer-class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-namespace/listvalueeditorxmlserializer-class"}},o={},s=[{value:"Static Methods",id:"static-methods",level:3}],d={toc:s},m="wrapper";function y(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Contains different extension functions for working with refrection and types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static class Korzh.EasyQuery.LinqTypeExtensions\n\n")),(0,r.kt)("p",null,"Assembly: ",(0,r.kt)("inlineCode",{parentName:"p"},"Korzh.EasyQuery.Linq.dll")),(0,r.kt)("h3",{id:"static-methods"},"Static Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CreateType(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"TypeBuilder")," builder)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Type")),(0,r.kt)("td",{parentName:"tr",align:null},"Creates the type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetConstructor(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"Type")," type, ",(0,r.kt)("inlineCode",{parentName:"td"},"Type[]")," types)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ConstructorInfo")),(0,r.kt)("td",{parentName:"tr",align:null},"Searches for a public instance constructor whose parameters match the types in  the specified array.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetDisplayName(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"PropertyInfo")," pi)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the display name of the property.  This function tries to get the name defined by Display or DisplayName attributes.  If any of these attributes is not defined - then the property name is returned.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetFields(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"Type")," type)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"FieldInfo[]")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets the list of fields for the specified type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetGenericArguments(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"Type")," type)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Type[]")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets the generic arguments (the list of types) for the specified type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetInterfaces(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"Type")," type)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"IEnumerable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Type"),">"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets the list of interfaces for the specified type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetMethod(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"Type")," type, ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," methodName)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"MethodInfo")),(0,r.kt)("td",{parentName:"tr",align:null},"Searches for the public method with the specified name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetMethod(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"Type")," type, ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," methodName, ",(0,r.kt)("inlineCode",{parentName:"td"},"Type[]")," types)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"MethodInfo")),(0,r.kt)("td",{parentName:"tr",align:null},"Searches for the public method with the specified name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetProperties(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"Type")," type)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PropertyInfo[]")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets the list of properties for the specified type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetProperties(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"Type")," type, ",(0,r.kt)("inlineCode",{parentName:"td"},"BindingFlags")," bindingFlags)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PropertyInfo[]")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets the list of properties for the specified type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetProperty(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"Type")," type, ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," name)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PropertyInfo")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets the property info for the specified type and property name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetTypeDisplayName(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"Type")," type)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets the display name of the type.  This function tries to get the name defined by Entity or EntityName attributes.  If any of these attributes is not defined - then the type name is returned.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IsEnumerable(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"Type")," typeToCheck)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the specified type is enumerable (supports ",(0,r.kt)("inlineCode",{parentName:"td"},"System.Collections.Generic.IEnumerable")," interface.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IsEnumerableOfSimpleType(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"Type")," typeToCheck)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the specified type is an enumerable of some simple type .")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IsGenericEnumerable(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"Type")," type)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the specified type is a generic enumerable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IsQueryable(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"Type")," typeToCheck)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether the specified type implements ",(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.IQueryable")," interface.")))))}y.isMDXComponent=!0}}]);