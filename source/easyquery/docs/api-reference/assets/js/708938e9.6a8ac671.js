"use strict";(self.webpackChunkeasy_query_docs_docusaurus=self.webpackChunkeasy_query_docs_docusaurus||[]).push([[7192],{3905:(e,t,r)=>{r.d(t,{Zo:()=>y,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},y=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,y=i(e,["components","mdxType","originalType","parentName"]),p=c(r),d=o,m=p["".concat(l,".").concat(d)]||p[d]||u[d]||a;return r?n.createElement(m,s(s({ref:t},y),{},{components:r})):n.createElement(m,s({ref:t},y))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},50844:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const a={},s=void 0,i={unversionedId:"korzh-easyquery-services-namespace/easyqueryoptionsextensionsefcoreidentity-class",id:"korzh-easyquery-services-namespace/easyqueryoptionsextensionsefcoreidentity-class",title:"easyqueryoptionsextensionsefcoreidentity-class",description:"Contains several extension methods for EasyQueryOptions  which allow to tune up the EasyQuery manager and middleware  in case of using them with EntityFrameworkCore and ASP.NET Core Identity",source:"@site/docs/korzh-easyquery-services-namespace/easyqueryoptionsextensionsefcoreidentity-class.md",sourceDirName:"korzh-easyquery-services-namespace",slug:"/korzh-easyquery-services-namespace/easyqueryoptionsextensionsefcoreidentity-class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-services-namespace/easyqueryoptionsextensionsefcoreidentity-class",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"easyqueryoptionsextensionsefcore-class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-services-namespace/easyqueryoptionsextensionsefcore-class"},next:{title:"easyqueryoptionsextensionslinq-class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-services-namespace/easyqueryoptionsextensionslinq-class"}},l={},c=[{value:"Static Methods",id:"static-methods",level:3}],y={toc:c},p="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},y,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Contains several extension methods for EasyQueryOptions  which allow to tune up the EasyQuery manager and middleware  in case of using them with EntityFrameworkCore and ASP.NET Core Identity"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"public static class Korzh.EasyQuery.Services.EasyQueryOptionsExtensionsEfCoreIdentity\n\n")),(0,o.kt)("p",null,"Assembly: ",(0,o.kt)("inlineCode",{parentName:"p"},"Korzh.EasyQuery.EntityFrameworkCore.Identity.dll")),(0,o.kt)("h3",{id:"static-methods"},"Static Methods"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"UseDbContextWithoutIdentity(",(0,o.kt)("span",{style:{color:"blue"}},"this")," [EasyQueryOptions](/korzh-easyquery-services-namespace/easyqueryoptions-class) options, `Action`<[DbContextModelExtractorOptions](/korzh-easyquery-entityframeworkcore-namespace/dbcontextmodelextractoroptions-class)> configurator = ",(0,o.kt)("span",{style:{color:"blue"}},"null"),")"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"void")),(0,o.kt)("td",{parentName:"tr",align:null},"Registers the model loader and connection resolver  based on the DbContext type passed in a type parameter.  Ignores all ASP.NET Core Identity store types,  like ",(0,o.kt)("inlineCode",{parentName:"td"},"Microsoft.AspNetCore.Identity.IdentityUser'1"),", ",(0,o.kt)("inlineCode",{parentName:"td"},"Microsoft.AspNetCore.Identity.IdentityRole'1")," etc.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"UseDbContextWithoutIdentity(",(0,o.kt)("span",{style:{color:"blue"}},"this")," [EasyQueryOptions](/korzh-easyquery-services-namespace/easyqueryoptions-class) options, `Func`<`IServiceProvider`, `DbContext`> dbContextResolver, `Action`<[DbContextModelExtractorOptions](/korzh-easyquery-entityframeworkcore-namespace/dbcontextmodelextractoroptions-class)> configurator = ",(0,o.kt)("span",{style:{color:"blue"}},"null"),")"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"void")),(0,o.kt)("td",{parentName:"tr",align:null},"Registers the model loader and connection resolver  based on the DbContext type passed in a type parameter.  Ignores all ASP.NET Core Identity store types,  like ",(0,o.kt)("inlineCode",{parentName:"td"},"Microsoft.AspNetCore.Identity.IdentityUser'1"),", ",(0,o.kt)("inlineCode",{parentName:"td"},"Microsoft.AspNetCore.Identity.IdentityRole'1")," etc.")))))}u.isMDXComponent=!0}}]);