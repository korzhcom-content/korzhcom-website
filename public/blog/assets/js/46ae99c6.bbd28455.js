"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8812],{4137:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>y});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,y=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(y,i(i({ref:t},c),{},{components:r})):n.createElement(y,i({ref:t},c))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7479:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=r(7462),a=(r(7294),r(4137));const o={title:"ASP.NET Identity - Weakening password policies",tags:["ASP-NET-CORE","ASP-NET-IDENTITY","PASSWORD"],authors:["korzh","melnalex"],slug:"aspnet-identity-weakening-password-policies"},i="ASP.NET Identity: Weakening password policies",s={permalink:"/blog/aspnet-identity-weakening-password-policies",source:"@site/blog/2018-02-10-aspnet-identity-weakening-password-policies/index.md",title:"ASP.NET Identity - Weakening password policies",description:"This is the second article in a series of articles about ASP.NET Core Identity.",date:"2018-02-10T00:00:00.000Z",formattedDate:"February 10, 2018",tags:[{label:"ASP-NET-CORE",permalink:"/blog/tags/asp-net-core"},{label:"ASP-NET-IDENTITY",permalink:"/blog/tags/asp-net-identity"},{label:"PASSWORD",permalink:"/blog/tags/password"}],readingTime:2.11,hasTruncateMarker:!0,authors:[{name:"Serhii Korzh",title:"Team Lead & Maintainer of EasyQuery",url:"https://github.com/korzh",imageURL:"https://github.com/korzh.png",key:"korzh"},{name:"Oleksandr Melnychenko",title:"Maintainer of EasyQuery & Localizer",url:"https://github.com/melnalex",imageURL:"https://github.com/melnalex.png",key:"melnalex"}],frontMatter:{title:"ASP.NET Identity - Weakening password policies",tags:["ASP-NET-CORE","ASP-NET-IDENTITY","PASSWORD"],authors:["korzh","melnalex"],slug:"aspnet-identity-weakening-password-policies"},prevItem:{title:"ASP.NET Identity - Migrating users' passwords from ASP.NET Membership",permalink:"/blog/aspnet-identity-migrate-membership-passwords"},nextItem:{title:"ASP.NET Identity - Use claims to store additional user's data",permalink:"/blog/aspnet-identity-store-user-data-in-claims"}},l={authorsImageUrls:[void 0,void 0]},p=[{value:"Problem",id:"problem",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...o}=e;return(0,a.kt)(u,(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{src:r(3368).Z,width:"1280",height:"681"})),(0,a.kt)("p",null,"This is the second article in a series of articles about ASP.NET Core Identity.\nYou can find the first one ","[here]","({{ 'ancid05' | internal_path }})."),(0,a.kt)("h2",{id:"problem"},"Problem"),(0,a.kt)("p",null,"Let's suppose you created a new ASP.NET Core with the default Authentication (like in ","[previous article]","({{ 'blog~__rt-md5b505xps82~_aspnet-identity-store-user-data-in-claims' | internal_path }})).\nThen you run it and try to register a new user. On the registration form, we need to enter a password.\nSince we need to register a user for testing purposes first of all - we don't want to make the password too complicated. We'd prefer to keep it simple and easy-to-remember (in the end - it's not a production-mode system!)"),(0,a.kt)("p",null,'However, if you try to enter something simple like "qwerty" or your name - you will get the following bunch of error messages:'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Passwords must have at least one non-alphanumeric character."),(0,a.kt)("li",{parentName:"ul"},"Passwords must have at least one digit ('0'-'9')."),(0,a.kt)("li",{parentName:"ul"},"Passwords must have at least one uppercase ('A'-'Z').")),(0,a.kt)("p",null,"The reason for all these validation errors is that by default ASP.NET Core Identity has very strong password policies for the users. In the error messages above you can see the constraints which must be satisfied."))}d.isMDXComponent=!0},3368:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/password-weak-57d9c5b4082153e2d8bc2b5d39b75a01.jpg"}}]);