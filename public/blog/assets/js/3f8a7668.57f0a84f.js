"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2286],{4137:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(r),g=s,d=p["".concat(l,".").concat(g)]||p[g]||m[g]||a;return r?n.createElement(d,o(o({ref:t},u),{},{components:r})):n.createElement(d,o({ref:t},u))}));function d(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,o=new Array(a);o[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:s,o[1]=i;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},8950:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=r(7462),s=(r(7294),r(4137));const a={title:"Using embedded resources in testing projects",tags:["UNIT-TESTING","INTEGRATION-TESTS","RESOURCES"],authors:["korzh","melnalex"],slug:"embedded-resources-testing-projects"},o="Using embedded resources in testing projects",i={permalink:"/blog/embedded-resources-testing-projects",source:"@site/blog/2018-05-30-embedded-resources-testing-projects/index.md",title:"Using embedded resources in testing projects",description:"Quite often when you are writing tests it's necessary to store some data together with the testing project to make them available in the test functions.",date:"2018-05-30T00:00:00.000Z",formattedDate:"May 30, 2018",tags:[{label:"UNIT-TESTING",permalink:"/blog/tags/unit-testing"},{label:"INTEGRATION-TESTS",permalink:"/blog/tags/integration-tests"},{label:"RESOURCES",permalink:"/blog/tags/resources"}],readingTime:1.55,hasTruncateMarker:!0,authors:[{name:"Serhii Korzh",title:"Team Lead & Maintainer of EasyQuery",url:"https://github.com/korzh",imageURL:"https://github.com/korzh.png",key:"korzh"},{name:"Oleksandr Melnychenko",title:"Maintainer of EasyQuery & Localizer",url:"https://github.com/melnalex",imageURL:"https://github.com/melnalex.png",key:"melnalex"}],frontMatter:{title:"Using embedded resources in testing projects",tags:["UNIT-TESTING","INTEGRATION-TESTS","RESOURCES"],authors:["korzh","melnalex"],slug:"embedded-resources-testing-projects"},prevItem:{title:"Add extra user claims in ASP.NET Core webapp",permalink:"/blog/add-extra-user-claims-aspnet-core-webapp"},nextItem:{title:"ASP.NET Identity - Adding master password",permalink:"/blog/aspnet-identity-master-password"}},l={authorsImageUrls:[void 0,void 0]},c=[],u={toc:c},p="wrapper";function m(e){let{components:t,...a}=e;return(0,s.kt)(p,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("img",{src:r(946).Z,width:"1280",height:"720"})),(0,s.kt)("p",null,"Quite often when you are writing tests it's necessary to store some data together with the testing project to make them available in the test functions."),(0,s.kt)("p",null,"The solution is quite simple:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"You put necessary files to some folder of your testing project (e.g. ",(0,s.kt)("inlineCode",{parentName:"p"},"Resources"),")")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},'Mark them as "Embedded Resource"')),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"After that, you can access any of these resources in any place of your testing module."))),(0,s.kt)("p",null,"Here is an example of a resource file included in your testing project:\n",(0,s.kt)("img",{parentName:"p",src:"https://korzh.com/static/blogs/net-tricks/vs-project-embres.png",alt:"an embedded resource file"})),(0,s.kt)("p",null,"Here is a static class with extension functions which may help you on step #3:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'public static class ResourceUtils\n{\n    public static Stream GetResourceStream(this Assembly assembly, string resourceFolder, string resourceFileName) \n    {\n         \n        string[] nameParts = assembly.FullName.Split(\',\');\n            \n        string resourceName = nameParts[0] + "." +  resourceFolder + "." + resourceFileName;\n\n        var resources = new List<string>(assembly.GetManifestResourceNames());\n        if (resources.Contains(resourceName))\n            return assembly.GetManifestResourceStream(resourceName);\n        else\n            return null;\n    }\n\n    public static string GetResourceAsString(this Assembly assembly, string folder, string fileName) \n    {\n        string fileContent;\n        using (StreamReader sr = new StreamReader(GetResourceStream(assembly, folder, fileName))) {\n            fileContent = sr.ReadToEnd();\n        }\n        return fileContent;\n    }\n    \n    public static Stream GetResourceStream(this Type type, string resourceFolder, string resourceFileName) \n    {\n        var assembly = type.GetTypeInfo().Assembly;\n        return assembly.GetResourceStream(resourceFolder, resourceFileName);\n    }\n    \n    public static string GetResourceAsString(this Type type, string folder, string fileName) \n    {\n        var assembly = type.GetTypeInfo().Assembly;\n        return assembly.GetResourceAsString(folder, fileName);\n    }   \n}\n\npublic class ResourceUtilsException : Exception {\n    public ResourceUtilsException(string message) : base(message) { }\n}\n')),(0,s.kt)("p",null,"To make it even simpler - we put these and some other functions to a ",(0,s.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Korzh.Utils/"},"Nuget package")," you can reference in your project."),(0,s.kt)("p",null,"Finally, here is how your testing function will access the resource file defined on the first step:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'[TestMethod]\npublic void TestMethod1() {\n    string xml = typeof(UnitTest1).GetResourceAsString("Resources", "XMLFile1.xml");\n    .    .    .    .    .    .\n}\n')),(0,s.kt)("p",null,"(here, for the ",(0,s.kt)("inlineCode",{parentName:"p"},"typeof")," function parameter you use any class from the same assembly where your resources are placed)"),(0,s.kt)("p",null,"Enjoy!"))}m.isMDXComponent=!0},946:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/cubes-677092_1280-cfd88cd19b62c7324e7ea2ace80b11f3.png"}}]);