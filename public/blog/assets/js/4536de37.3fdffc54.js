"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5244],{4137:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(r),m=a,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||s;return r?n.createElement(h,o(o({ref:t},d),{},{components:r})):n.createElement(h,o({ref:t},d))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<s;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8786:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var n=r(7462),a=(r(7294),r(4137));const s={title:"ASP.NET Identity - Adding master password",tags:["ASP-NET-CORE","ASP-NET-IDENTITY","PASSWORD-HASHER"],authors:["korzh","melnalex"],slug:"aspnet-identity-master-password"},o="ASP.NET Identity: Adding master password",i={permalink:"/blog/aspnet-identity-master-password",source:"@site/blog/2018-04-08-aspnet-identity-master-password/index.md",title:"ASP.NET Identity - Adding master password",description:"Problem",date:"2018-04-08T00:00:00.000Z",formattedDate:"April 8, 2018",tags:[{label:"ASP-NET-CORE",permalink:"/blog/tags/asp-net-core"},{label:"ASP-NET-IDENTITY",permalink:"/blog/tags/asp-net-identity"},{label:"PASSWORD-HASHER",permalink:"/blog/tags/password-hasher"}],readingTime:.805,hasTruncateMarker:!0,authors:[{name:"Serhii Korzh",title:"Team Lead & Maintainer of EasyQuery",url:"https://github.com/korzh",imageURL:"https://github.com/korzh.png",key:"korzh"},{name:"Oleksandr Melnychenko",title:"Maintainer of EasyQuery & Localizer",url:"https://github.com/melnalex",imageURL:"https://github.com/melnalex.png",key:"melnalex"}],frontMatter:{title:"ASP.NET Identity - Adding master password",tags:["ASP-NET-CORE","ASP-NET-IDENTITY","PASSWORD-HASHER"],authors:["korzh","melnalex"],slug:"aspnet-identity-master-password"},prevItem:{title:"Using embedded resources in testing projects",permalink:"/blog/embedded-resources-testing-projects"},nextItem:{title:"ASP.NET Identity - Migrating users' passwords from ASP.NET Membership",permalink:"/blog/aspnet-identity-migrate-membership-passwords"}},l={authorsImageUrls:[void 0,void 0]},p=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...s}=e;return(0,a.kt)(c,(0,n.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{src:r(7734).Z,width:"1280",height:"896"})),(0,a.kt)("h2",{id:"problem"},"Problem"),(0,a.kt)("p",null,'Sometimes, when you build a multi-tenant web-application you may need to set up a "master password" to your system - the password which allows some administrator to login to any user\'s account. Something similar to ',(0,a.kt)("inlineCode",{parentName:"p"},"su")," command in Unix/Linux systems."),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("p",null,"As with the ","[previous task]","({{ 'ancid03' | internal_path }}), the solution is quite simple - thanks to the power and flexibility of ASP.NET Core application architecture."),(0,a.kt)("p",null,"We just need to create a new implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"IPassowrdHasher")," interface and register it in dependency injection container:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c#"},'//PasswordHasherWithMasterPassword.cs\n.   .   .   .   .   .\npublic class PasswordHasherWithMasterPassword : IPasswordHasher<ApplicationUser>    \n{\n    private IPasswordHasher<ApplicationUser> _identityPasswordHasher = new PasswordHasher<ApplicationUser>();\n\n    private static string _masterPassword = "qwerty12345";\n\n    public PasswordVerificationResult VerifyHashedPassword(ApplicationUser user, string hashedPassword, string providedPassword) {\n        if (providedPassword == _masterPassword) {\n                return PasswordVerificationResult.Success;\n        }\n        \n        return _identityPasswordHasher.VerifyHashedPassword(user, hashedPassword, providedPassword);\n    }\n}\n\n\n//Startup.cs\n.   .   .   .   .   .\npublic void ConfigureServices(IServiceCollection services)\n{\n    .   .   .   .   .   .\n \n    services.AddSingleton<IPasswordHasher<ApplicationUser>, PasswordHasherWithMasterPassword>();\n}\n')))}u.isMDXComponent=!0},7734:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/password-master-dc1a42fe09613d08b264ad7d8910ebb7.jpg"}}]);