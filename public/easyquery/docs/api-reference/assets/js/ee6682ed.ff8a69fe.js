"use strict";(self.webpackChunkeasy_query_docs_docusaurus=self.webpackChunkeasy_query_docs_docusaurus||[]).push([[8319],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=d(n),u=r,b=c["".concat(s,".").concat(u)]||c[u]||m[u]||o;return n?a.createElement(b,l(l({ref:t},p),{},{components:n})):a.createElement(b,l({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var d=2;d<o;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},97407:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const o={},l=void 0,i={unversionedId:"korzh-easyquery-db-namespace/DbConnectionModelLoaderOptions class",id:"korzh-easyquery-db-namespace/DbConnectionModelLoaderOptions class",title:"DbConnectionModelLoaderOptions class",description:"Represents different options for Korzh.EasyQuery.Services.DbConnectionModelLoader class",source:"@site/docs/korzh-easyquery-db-namespace/DbConnectionModelLoaderOptions class.md",sourceDirName:"korzh-easyquery-db-namespace",slug:"/korzh-easyquery-db-namespace/DbConnectionModelLoaderOptions class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-db-namespace/DbConnectionModelLoaderOptions class",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DbConnectionLoaderOptions class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-db-namespace/DbConnectionLoaderOptions class"},next:{title:"DbEntityAttr class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-db-namespace/DbEntityAttr class"}},s={},d=[{value:"Constructors",id:"constructors",level:3},{value:"Properties",id:"properties",level:3},{value:"Methods",id:"methods",level:3}],p={toc:d},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Represents different options for ",(0,r.kt)("a",{parentName:"p",href:"/korzh-easyquery-services-namespace/dbconnectionmodelloader-class"},"Korzh.EasyQuery.Services.DbConnectionModelLoader")," class"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Korzh.EasyQuery.Db.DbConnectionModelLoaderOptions\n\n")),(0,r.kt)("p",null,"Assembly: ",(0,r.kt)("inlineCode",{parentName:"p"},"Korzh.EasyQuery.Db.dll")),(0,r.kt)("h3",{id:"constructors"},"Constructors"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DbConnectionModelLoaderOptions()"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"void")),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"properties"},"Properties"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FieldFilters"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"IReadOnlyList"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Func"),"<",(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbfieldinfo-class"},"DbFieldInfo"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"bool"),">",">"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets the field filters. Each filter is a function which returns ",(0,r.kt)("c",null,"true")," for the field that should be processed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"HideKeyFields"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets a value indicating whether we need to hide key fields.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PrettifyNames"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets a value indicating whether we need to prettify table and column names")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ReplaceToSingularNames"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets a value indicating whether replace the name of the table in plural form (like Customers)  to it singular variant (Customer) when we create an entity by some table.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Schemas"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"IReadOnlyList"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"string"),">"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets the list of schemas.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SplitTablesOnMultiReference"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Split one table on two (or more) if there are multi-references between two tables")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TableFilters"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"IReadOnlyList"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Func"),"<",(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbtableinfo-class"},"DbTableInfo"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"bool"),">",">"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets the table filters. Each filter is a function which returns ",(0,r.kt)("c",null,"true")," for the tables that should be processed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UseNameColumnsInLookups"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},'Gets or sets a value indicating whether the model loader will try to find a "name" ("text") column in the referenced table  when the SQL statement for lookup value editor is generated.')))),(0,r.kt)("h3",{id:"methods"},"Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"AddFieldFilter(",(0,r.kt)("inlineCode",{parentName:"td"},"Func"),"<",(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbfieldinfo-class"},"DbFieldInfo"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"bool"),">"," filter)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbconnectionmodelloaderoptions-class"},"DbConnectionModelLoaderOptions")),(0,r.kt)("td",{parentName:"tr",align:null},"Adds the field filter.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"AddTableFilter(",(0,r.kt)("inlineCode",{parentName:"td"},"Func"),"<",(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbtableinfo-class"},"DbTableInfo"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"bool"),">"," filter)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbconnectionmodelloaderoptions-class"},"DbConnectionModelLoaderOptions")),(0,r.kt)("td",{parentName:"tr",align:null},"Adds the table filter.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DoNotPrettifyNames()"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbconnectionmodelloaderoptions-class"},"DbConnectionModelLoaderOptions")),(0,r.kt)("td",{parentName:"tr",align:null},"Sets the value ",(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbconnectionmodelloaderoptions-class"},"Korzh.EasyQuery.Db.DbConnectionModelLoaderOptions.PrettifyNames")," property to false.  This function returns the same instance of ",(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbconnectionmodelloaderoptions-class"},"Korzh.EasyQuery.Db.DbConnectionModelLoaderOptions")," so it can be used in the method chaining calls.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DoNotReplaceToSingularNames()"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbconnectionmodelloaderoptions-class"},"DbConnectionModelLoaderOptions")),(0,r.kt)("td",{parentName:"tr",align:null},"Sets the value ",(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbconnectionmodelloaderoptions-class"},"Korzh.EasyQuery.Db.DbConnectionModelLoaderOptions.ReplaceToSingularNames")," property to false.  This function returns the same instance of ",(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbconnectionmodelloaderoptions-class"},"Korzh.EasyQuery.Db.DbConnectionModelLoaderOptions")," so it can be used in the method chaining calls.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DoNotSplitTablesOnMultiReference()"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbconnectionmodelloaderoptions-class"},"DbConnectionModelLoaderOptions")),(0,r.kt)("td",{parentName:"tr",align:null},"Sets the value ",(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbconnectionmodelloaderoptions-class"},"Korzh.EasyQuery.Db.DbConnectionModelLoaderOptions.SplitTablesOnMultiReference")," property to false.  This function returns the same instance of ",(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbconnectionmodelloaderoptions-class"},"Korzh.EasyQuery.Db.DbConnectionModelLoaderOptions")," so it can be used in the method chaining calls.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IgnoreViews()"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbconnectionmodelloaderoptions-class"},"DbConnectionModelLoaderOptions")),(0,r.kt)("td",{parentName:"tr",align:null},"Add the filter which makes model loader to ignore the views and process only the tables.  This function returns the same instance of ",(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbconnectionmodelloaderoptions-class"},"Korzh.EasyQuery.Db.DbConnectionModelLoaderOptions")," so it can be used in the method chaining calls.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UseSchemas(",(0,r.kt)("inlineCode",{parentName:"td"},"String[]")," schemas)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbconnectionmodelloaderoptions-class"},"DbConnectionModelLoaderOptions")),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies which schemas will be used during loading the model.")))))}m.isMDXComponent=!0}}]);