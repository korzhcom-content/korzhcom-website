"use strict";(self.webpackChunkeasy_query_docs_docusaurus=self.webpackChunkeasy_query_docs_docusaurus||[]).push([[5846],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>y});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),d=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=d(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(a),c=n,y=u["".concat(i,".").concat(c)]||u[c]||m[c]||l;return a?r.createElement(y,s(s({ref:t},p),{},{components:a})):r.createElement(y,s({ref:t},p))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,s=new Array(l);s[0]=c;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[u]="string"==typeof e?e:n,s[1]=o;for(var d=2;d<l;d++)s[d]=a[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},64380:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var r=a(87462),n=(a(67294),a(3905));const l={},s=void 0,o={unversionedId:"korzh-easyquery-db-namespace/DbQueryBuilder class",id:"korzh-easyquery-db-namespace/DbQueryBuilder class",title:"DbQueryBuilder class",description:"Lets you build SQL commands based on Korzh.EasyQuery.Db.DbQuery object",source:"@site/docs/korzh-easyquery-db-namespace/DbQueryBuilder class.md",sourceDirName:"korzh-easyquery-db-namespace",slug:"/korzh-easyquery-db-namespace/DbQueryBuilder class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-db-namespace/DbQueryBuilder class",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DbQuery class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-db-namespace/DbQuery class"},next:{title:"DbTable class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-db-namespace/DbTable class"}},i={},d=[{value:"Constructors",id:"constructors",level:3},{value:"Fields",id:"fields",level:3},{value:"Properties",id:"properties",level:3},{value:"Events",id:"events",level:3},{value:"Methods",id:"methods",level:3}],p={toc:d},u="wrapper";function m(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Lets you build SQL commands based on ",(0,n.kt)("a",{parentName:"p",href:"/korzh-easyquery-db-namespace/dbquery-class"},"Korzh.EasyQuery.Db.DbQuery")," object"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract class Korzh.EasyQuery.Db.DbQueryBuilder\n    : IQueryBuilder\n\n")),(0,n.kt)("p",null,"Assembly: ",(0,n.kt)("inlineCode",{parentName:"p"},"Korzh.EasyQuery.Db.dll")),(0,n.kt)("h3",{id:"constructors"},"Constructors"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"DbQueryBuilder(",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbquery-class"},"DbQuery")," query)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"void")),(0,n.kt)("td",{parentName:"tr",align:null},"Initializes a new instance of the ",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbquerybuilder-class"},"Korzh.EasyQuery.Db.DbQueryBuilder")," class.")))),(0,n.kt)("h3",{id:"fields"},"Fields"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"_isParamMode"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"bool")),(0,n.kt)("td",{parentName:"tr",align:null},"This property indicated whethere generated SQL should include parameters instead of real values.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"condFieldName"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null},"The name of the field in currently processing condition (used for generation of parameter names)")))),(0,n.kt)("h3",{id:"properties"},"Properties"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"EscapeDef"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null},"contains escape symbol definition which will be added to the condition if necessary")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Extras"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/sqlextras-class"},"SqlExtras")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets the ",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/sqlextras-class"},"Korzh.EasyQuery.Db.SqlExtras")," object which defines some extra clauses and options of the generated query.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Formats"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/sqlformats-class"},"SqlFormats")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets the formats of the result query statement.  This is a structure which allows you to set different formatting option of generated SQL (or other query language) statements.  For more information please read ",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/sqlformats-class"},"Korzh.EasyQuery.Db.SqlFormats")," reference.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Model"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbmodel-class"},"DbModel")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets the model. An instance of ",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/datamodel-class"},"Korzh.EasyQuery.DataModel")," class or one of its descendants (for example DbModel)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Options"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/querybuilderoptions-class"},"QueryBuilderOptions")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets or sets the builder's options.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Query"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbquery-class"},"DbQuery")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets the query object associated with the builder.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"QueryParams"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/queryparamlist-class"},"QueryParamList")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets the list of query parameters (for parameterized queries)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Result"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/querystatement-class"},"QueryStatement")),(0,n.kt)("td",{parentName:"tr",align:null},"QueryBuilder result.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"StatementType"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Type")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets the the statement type.")))),(0,n.kt)("h3",{id:"events"},"Events"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ConditionSqlGenerated"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"ConditionSqlGeneratedEventHandler")),(0,n.kt)("td",{parentName:"tr",align:null},"This event is raised during query building for each condition in the query and it  allows you to replace the SQL expression generated for this condition.")))),(0,n.kt)("h3",{id:"methods"},"Methods"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"AddExtraParams(",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/queryparamlist-class"},"QueryParamList")," extraParams)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"void")),(0,n.kt)("td",{parentName:"tr",align:null},"Adds the list of extra parameters (mainly for sub-queries)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Build()"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"bool")),(0,n.kt)("td",{parentName:"tr",align:null},"Builds the query and stores the result in the ",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbquerybuilder-class"},"Korzh.EasyQuery.Db.DbQueryBuilder.Result")," property.  The result could be some SQL statement or and an IQueryable object created by LINQ query builder.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"CalcScalarExpr(",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/condition-class"},"Condition")," cnd, ",(0,n.kt)("inlineCode",{parentName:"td"},"string")," value, ",(0,n.kt)("inlineCode",{parentName:"td"},"DataType")," dataType, ",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/scalarexproptions-enum"},"ScalarExprOptions")," exprOptions)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null},"Calculates the scalar value and returns SQL (or other query language) expression.  This function replaces all macros with their real values first and then call ",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbquerybuilder-class"},"Korzh.EasyQuery.Db.DbQueryBuilder.ProcessScalarValue(Korzh.EasyQuery.Condition,System.String,EasyData.DataType,Korzh.EasyQuery.ScalarExprOptions)")," method to get the result.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GetGroupByExpr(",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/querycolumn-class"},"QueryColumn")," column, ",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/sqlformats-class"},"SqlFormats")," formats)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets the column's expression using in GROUP BY clause.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GetOrderByExpr(",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/querycolumn-class"},"QueryColumn")," column, ",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/sqlformats-class"},"SqlFormats")," formats)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets the columns expression for ORDER BY clause.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GetParamExpr(",(0,n.kt)("inlineCode",{parentName:"td"},"string")," id)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets the parameter expression.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GetSelectExpr(",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/querycolumn-class"},"QueryColumn")," column, ",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/sqlformats-class"},"SqlFormats")," formats)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets the columns expression for SELECT clause.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ProcessDefaultMacros(",(0,n.kt)("inlineCode",{parentName:"td"},"StringBuilder")," sb, ",(0,n.kt)("inlineCode",{parentName:"td"},"bool")," quoting = False)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"void")),(0,n.kt)("td",{parentName:"tr",align:null},"Processes the default macros such as ${{Today}}, ${{True}} and others.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ProcessFunctions(",(0,n.kt)("inlineCode",{parentName:"td"},"StringBuilder")," sb)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"void")),(0,n.kt)("td",{parentName:"tr",align:null},"Processes the functions")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ProcessMacros(",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/condition-class"},"Condition")," cnd, ",(0,n.kt)("inlineCode",{parentName:"td"},"StringBuilder")," sb, ",(0,n.kt)("inlineCode",{parentName:"td"},"DataType")," dataType, ",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/scalarexproptions-enum"},"ScalarExprOptions")," exprOptions)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"void")),(0,n.kt)("td",{parentName:"tr",align:null},"Processes the macro values (both user-defined and default)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ProcessScalarValue(",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/condition-class"},"Condition")," cnd, ",(0,n.kt)("inlineCode",{parentName:"td"},"string")," value, ",(0,n.kt)("inlineCode",{parentName:"td"},"DataType")," dataType, ",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/scalarexproptions-enum"},"ScalarExprOptions")," exprOptions)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null},"Processes the scalar value and returns SQL (or other query language) expression.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ResetGeneratedParams()"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"void")),(0,n.kt)("td",{parentName:"tr",align:null},"Reset the list of parameters if its necessary")))))}m.isMDXComponent=!0}}]);