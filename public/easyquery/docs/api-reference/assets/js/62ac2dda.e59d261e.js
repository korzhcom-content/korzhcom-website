"use strict";(self.webpackChunkeasy_query_docs_docusaurus=self.webpackChunkeasy_query_docs_docusaurus||[]).push([[992],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>c});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=r.createContext({}),s=function(e){var t=r.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(a),k=n,c=m["".concat(d,".").concat(k)]||m[k]||u[k]||l;return a?r.createElement(c,i(i({ref:t},p),{},{components:a})):r.createElement(c,i({ref:t},p))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=k;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[m]="string"==typeof e?e:n,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}k.displayName="MDXCreateElement"},89848:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var r=a(87462),n=(a(67294),a(3905));const l={},i=void 0,o={unversionedId:"korzh-easyquery-db-namespace/DbModel class",id:"korzh-easyquery-db-namespace/DbModel class",title:"DbModel class",description:"Database-related implementation of Korzh.EasyQuery.DataModel class.  In addition to the basic data it contains also list of database tables and the links between them.",source:"@site/docs/korzh-easyquery-db-namespace/DbModel class.md",sourceDirName:"korzh-easyquery-db-namespace",slug:"/korzh-easyquery-db-namespace/DbModel class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-db-namespace/DbModel class",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DbLinkInfoList class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-db-namespace/DbLinkInfoList class"},next:{title:"DbModelExtensions class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-db-namespace/DbModelExtensions class"}},d={},s=[{value:"Constructors",id:"constructors",level:3},{value:"Properties",id:"properties",level:3},{value:"Methods",id:"methods",level:3}],p={toc:s},m="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Database-related implementation of ",(0,n.kt)("a",{parentName:"p",href:"/korzh-easyquery-namespace/datamodel-class"},"Korzh.EasyQuery.DataModel")," class.  In addition to the basic data it contains also list of database tables and the links between them."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Korzh.EasyQuery.Db.DbModel\n    : DataModel\n\n")),(0,n.kt)("p",null,"Assembly: ",(0,n.kt)("inlineCode",{parentName:"p"},"Korzh.EasyQuery.Db.dll")),(0,n.kt)("h3",{id:"constructors"},"Constructors"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"DbModel()"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"void")),(0,n.kt)("td",{parentName:"tr",align:null},"Initializes a new instance of the ",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbmodel-class"},"Korzh.EasyQuery.Db.DbModel")," class.")))),(0,n.kt)("h3",{id:"properties"},"Properties"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"DbParams"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbparameters-class"},"DbParameters")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets the ",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbparameters-class"},"Korzh.EasyQuery.Db.DbParameters")," object that represents different options of database linked with current data model.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"IsEmpty"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"bool")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets a value indicating wether model is empty;")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Links"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/tablelinkstore-class"},"TableLinkStore")),(0,n.kt)("td",{parentName:"tr",align:null},"List of links between the model tables.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"PrimaryTableName"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null},'The name of the primary which will be used as a "root" table for this query (regardless it\'s used already in any column/condition or not)')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"StoreDbParams"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"bool")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets or sets a value indicating whether ",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbmodel-class"},"Korzh.EasyQuery.Db.DbModel.DbParams")," will be store in data model definition file.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"TableCategories"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/tablecategorylist-class"},"TableCategoryList")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets the list of table categories.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Tables"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/tablestore-class"},"TableStore")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets list of data model tables.")))),(0,n.kt)("h3",{id:"methods"},"Methods"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"AddEntityAttr(",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbentityattrdescriptor-class"},"DbEntityAttrDescriptor")," desc)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbentityattr-class"},"DbEntityAttr")),(0,n.kt)("td",{parentName:"tr",align:null},"Adds a new attribute to the model.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"AssignEntityAttrID(",(0,n.kt)("inlineCode",{parentName:"td"},"MetaEntityAttr")," attr)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"void")),(0,n.kt)("td",{parentName:"tr",align:null},"Assigns the default ID for entity attribute.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Clear()"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"void")),(0,n.kt)("td",{parentName:"tr",align:null},"Clears this instance.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"CreateEntityAttr(",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbentityattrdescriptor-class"},"DbEntityAttrDescriptor")," desc)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbentityattr-class"},"DbEntityAttr")),(0,n.kt)("td",{parentName:"tr",align:null},"Creates the entity attribute. Used for creating entity attributes while building the model")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"CreateEntityAttrCore(",(0,n.kt)("inlineCode",{parentName:"td"},"MetaEntity")," entity, ",(0,n.kt)("inlineCode",{parentName:"td"},"EntityAttrKind")," kind)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"MetaEntityAttr")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"CreateNullOperator()"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/operator-class"},"Operator")),(0,n.kt)("td",{parentName:"tr",align:null},"Creates the 'null' operator - a special operator which is used when a real operator can't be found (e.g. wrong ID)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"CreateOperator()"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/operator-class"},"Operator")),(0,n.kt)("td",{parentName:"tr",align:null},"Creates the operator. Used for creating objects while building the model")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"CreateOperator(",(0,n.kt)("inlineCode",{parentName:"td"},"string")," id, ",(0,n.kt)("inlineCode",{parentName:"td"},"string")," caption, ",(0,n.kt)("inlineCode",{parentName:"td"},"string")," expr, ",(0,n.kt)("inlineCode",{parentName:"td"},"string")," format)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/operator-class"},"Operator")),(0,n.kt)("td",{parentName:"tr",align:null},"Creates the operator. Used for creating objects while building the model")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"CreateQuery(",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/query-class"},"Query")," parentQuery = ",(0,n.kt)("span",{style:{color:"blue"}},"null"),")"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/query-class"},"Query")),(0,n.kt)("td",{parentName:"tr",align:null},"Creates a Query object associated with this model")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"CreateTableAlias(",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbtable-class"},"DbTable")," fromTable, ",(0,n.kt)("inlineCode",{parentName:"td"},"string")," aliasName, ",(0,n.kt)("inlineCode",{parentName:"td"},"bool")," createEntity = True, ",(0,n.kt)("inlineCode",{parentName:"td"},"string")," entityName = ",(0,n.kt)("span",{style:{color:"blue"}},"null"),", `Func`<[TableLink](/korzh-easyquery-db-namespace/tablelink-class), `bool`> linkFilter = ",(0,n.kt)("span",{style:{color:"blue"}},"null"),", `Func`<[DbEntityAttr](/korzh-easyquery-db-namespace/dbentityattr-class), `bool`> entityAttrFilter = ",(0,n.kt)("span",{style:{color:"blue"}},"null"),")"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/dbtable-class"},"DbTable")),(0,n.kt)("td",{parentName:"tr",align:null},"Creates table alias from the table.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"OnModelChanged()"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"void")),(0,n.kt)("td",{parentName:"tr",align:null},"Called after the model has been changed.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"OnModelLoaded()"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"void")),(0,n.kt)("td",{parentName:"tr",align:null},"Called after the model has been loaded from some file or string.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ReadOneModelPropFromJsonAsync(",(0,n.kt)("inlineCode",{parentName:"td"},"JsonReader")," reader, ",(0,n.kt)("inlineCode",{parentName:"td"},"string")," propName, ",(0,n.kt)("inlineCode",{parentName:"td"},"CancellationToken")," ct)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Task")),(0,n.kt)("td",{parentName:"tr",align:null},"Reads one model property from JSON (asynchronous way).")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"SetTableCategory(",(0,n.kt)("a",{parentName:"td",href:"/korzh-easyquery-db-namespace/table-class"},"Table")," table, ",(0,n.kt)("inlineCode",{parentName:"td"},"string")," categoryName)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"bool")),(0,n.kt)("td",{parentName:"tr",align:null},"Sets the category of the table. Creates a new category if the specified one does not exist yet.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"UpdateTableCategories()"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"void")),(0,n.kt)("td",{parentName:"tr",align:null},"Updates the categories in tables (usually after the loading).")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ValidateEntityAttrDesc(",(0,n.kt)("inlineCode",{parentName:"td"},"MetaEntityAttrDescriptor")," desc)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"void")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"WriteContentToJsonAsync(",(0,n.kt)("inlineCode",{parentName:"td"},"JsonWriter")," writer, ",(0,n.kt)("inlineCode",{parentName:"td"},"BitOptions")," rwOptions, ",(0,n.kt)("inlineCode",{parentName:"td"},"CancellationToken")," ct)"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Task")),(0,n.kt)("td",{parentName:"tr",align:null},"Writes the content of DbMomdel to JSON (asynchronous way).")))))}u.isMDXComponent=!0}}]);