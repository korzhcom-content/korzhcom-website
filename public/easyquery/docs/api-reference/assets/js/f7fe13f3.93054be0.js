"use strict";(self.webpackChunkeasy_query_docs_docusaurus=self.webpackChunkeasy_query_docs_docusaurus||[]).push([[4744],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>N});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),s=p(a),k=r,N=s["".concat(o,".").concat(k)]||s[k]||u[k]||l;return a?n.createElement(N,i(i({ref:t},m),{},{components:a})):n.createElement(N,i({ref:t},m))}));function N(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=k;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d[s]="string"==typeof e?e:r,i[1]=d;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},8080:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const l={},i=void 0,d={unversionedId:"korzh-easyquery-namespace/utils-class",id:"korzh-easyquery-namespace/utils-class",title:"utils-class",description:"Represents different type conversion functions and other useful procedures",source:"@site/docs/korzh-easyquery-namespace/utils-class.md",sourceDirName:"korzh-easyquery-namespace",slug:"/korzh-easyquery-namespace/utils-class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-namespace/utils-class",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"typeextensions-class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-namespace/typeextensions-class"},next:{title:"valueeditorentry-class",permalink:"/easyquery/docs/api-reference/korzh-easyquery-namespace/valueeditorentry-class"}},o={},p=[{value:"Static Fields",id:"static-fields",level:3},{value:"Static Methods",id:"static-methods",level:3}],m={toc:p},s="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(s,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Represents different type conversion functions and other useful procedures"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static class Korzh.EasyQuery.Utils\n\n")),(0,r.kt)("p",null,"Assembly: ",(0,r.kt)("inlineCode",{parentName:"p"},"Korzh.EasyQuery.dll")),(0,r.kt)("h3",{id:"static-fields"},"Static Fields"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FunctionRegex"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Regex")),(0,r.kt)("td",{parentName:"tr",align:null},"The Regex object that matches a function.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MacroRegex"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Regex")),(0,r.kt)("td",{parentName:"tr",align:null},"The Regex object that matches a macro value.")))),(0,r.kt)("h3",{id:"static-methods"},"Static Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ComposeKey(",(0,r.kt)("inlineCode",{parentName:"td"},"string")," parent, ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," child)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},'Composes the key (for attributes, entities, etc).  Returns "parent.key" if both parent and key are not empty/null')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ContainsNonAscii(",(0,r.kt)("inlineCode",{parentName:"td"},"string")," s)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Checks string for inclusion of non-ASCII symbols.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DataKindByName(",(0,r.kt)("inlineCode",{parentName:"td"},"string")," kindName)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/datakind-enum"},"DataKind")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets the DataKind value by its text representation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FormatDateTimeValue(",(0,r.kt)("inlineCode",{parentName:"td"},"string")," val, ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," format, ",(0,r.kt)("inlineCode",{parentName:"td"},"DataType")," dataType, ",(0,r.kt)("inlineCode",{parentName:"td"},"int")," timezoneOffset = 0)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Converts the date/time passed in internal format  used in EasyQuery library (yyyy-MM-dd HH:mm:ss by default)  to some other date/time format")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GenerateId(",(0,r.kt)("inlineCode",{parentName:"td"},"string")," prefix)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Generates Id with prefix.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetCurrentCulture()"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CultureInfo")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns current culture")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetCurrentUICulture()"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CultureInfo")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns current UI culture")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetElementContentAsString(",(0,r.kt)("inlineCode",{parentName:"td"},"XmlReader")," reader)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Reads the content of current XML element (as string)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetEnumValues(",(0,r.kt)("inlineCode",{parentName:"td"},"Type")," oEnumType)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"IList"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"int"),">"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets all values of the enum.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetSpecialDateByName(",(0,r.kt)("inlineCode",{parentName:"td"},"string")," name, ",(0,r.kt)("inlineCode",{parentName:"td"},"bool")," utc)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DateTime")),(0,r.kt)("td",{parentName:"tr",align:null},'Gets the actual date value by its macro name (like "Today", "FirstDayOfMonth", etc).')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetSpecialDateByNameEx(",(0,r.kt)("inlineCode",{parentName:"td"},"string")," name, ",(0,r.kt)("inlineCode",{parentName:"td"},"bool")," utc, ",(0,r.kt)("inlineCode",{parentName:"td"},"DataType&")," dt, ",(0,r.kt)("inlineCode",{parentName:"td"},"String&")," text)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DateTime")),(0,r.kt)("td",{parentName:"tr",align:null},'Gets the actual date value by its macro name (like "Today", "FirstDayOfMonth", etc).')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetSpecialDateValue(",(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/specialdatetime-enum"},"SpecialDateTime")," sdt, ",(0,r.kt)("inlineCode",{parentName:"td"},"bool")," utc)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DateTime")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets the value of some special date (like Today or FirstDayOfYear) by its enum definition.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetSpecialDateValueEx(",(0,r.kt)("a",{parentName:"td",href:"/korzh-easyquery-namespace/specialdatetime-enum"},"SpecialDateTime")," sdt, ",(0,r.kt)("inlineCode",{parentName:"td"},"bool")," utc, ",(0,r.kt)("inlineCode",{parentName:"td"},"DataType&")," dt, ",(0,r.kt)("inlineCode",{parentName:"td"},"String&")," text)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DateTime")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets the value of some special date (like Today or FirstDayOfYear) by its enum definition.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetSystemTypeByDataType(",(0,r.kt)("inlineCode",{parentName:"td"},"DataType")," type)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Type")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets the system type by data type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetSystemTypeByDataType(",(0,r.kt)("inlineCode",{parentName:"td"},"DataType")," dtype, ",(0,r.kt)("inlineCode",{parentName:"td"},"Type")," defaultType)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Type")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets the system type by data type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"HasTheSameTypeGroup(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"DataType")," type1, ",(0,r.kt)("inlineCode",{parentName:"td"},"DataType")," type2)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns true if type1 has the same type group (e.g. integer types) as type2.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IsConvertedTo(",(0,r.kt)("span",{style:{color:"blue"}},"this")," ",(0,r.kt)("inlineCode",{parentName:"td"},"DataType")," type1, ",(0,r.kt)("inlineCode",{parentName:"td"},"DataType")," type2)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns true if type1 can be converted to type2.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IsSpecialDateTimeMacro(",(0,r.kt)("inlineCode",{parentName:"td"},"string")," macroId)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},'Determines whether the string passed in parameter represents a special date/time identifier (like "Today", "FirstDayOfMonth", etc)')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MatchMacro(",(0,r.kt)("inlineCode",{parentName:"td"},"string")," s, ",(0,r.kt)("inlineCode",{parentName:"td"},"String&")," macroId)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},'Matches the macro in the input string.  Returns the name of the macro in "out" parameter if the match was successful')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MoveToAttribute(",(0,r.kt)("inlineCode",{parentName:"td"},"XmlReader")," reader, ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," attrName)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Moves current position of XmlReader into specified attribute.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OldFormatToDateTime(",(0,r.kt)("inlineCode",{parentName:"td"},"string")," val)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DateTime")),(0,r.kt)("td",{parentName:"tr",align:null},"Convert string representation in old format to DateTime value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SafeParseBool(",(0,r.kt)("inlineCode",{parentName:"td"},"string")," value, ",(0,r.kt)("inlineCode",{parentName:"td"},"bool")," defValue = False)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Converts the string representation of a boolean value.  This method does not throw an exception. Instead - it returns some pre-defined value for unsuccessful conversions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SafeParseInt(",(0,r.kt)("inlineCode",{parentName:"td"},"string")," s, ",(0,r.kt)("inlineCode",{parentName:"td"},"int")," defValue = 0)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")),(0,r.kt)("td",{parentName:"tr",align:null},"Converts the string representation of a number to its 32-bit signed integer equivalent.  This method does not throw an exception. Instead - it returns some pre-defined value for unsuccessful conversions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"StrToIdentifier(",(0,r.kt)("inlineCode",{parentName:"td"},"string")," s)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Converts any string to an identifier (changes all symbols like '.' ';' '?' etc to '_')")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TextEq(",(0,r.kt)("inlineCode",{parentName:"td"},"string")," s1, ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," s2)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Provides case-insensitive string comparision")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TryGetSpecialDate(",(0,r.kt)("inlineCode",{parentName:"td"},"string")," macroId, ",(0,r.kt)("inlineCode",{parentName:"td"},"bool")," useUtcTime, ",(0,r.kt)("inlineCode",{parentName:"td"},"DateTime&")," dateVal, ",(0,r.kt)("inlineCode",{parentName:"td"},"DataType&")," dt, ",(0,r.kt)("inlineCode",{parentName:"td"},"String&")," text)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},'Gets the actual date value by its macro name (like "Today", "FirstDayOfMonth", etc).  This function returns false if the macro name is not recoginized.')))))}u.isMDXComponent=!0}}]);